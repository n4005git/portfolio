(function(n){function e(e){for(var t,s,o=e[0],l=e[1],c=e[2],p=0,u=[];p<o.length;p++)s=o[p],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&u.push(a[s][0]),a[s]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);d&&d(e);while(u.length)u.shift()();return i.push.apply(i,c||[]),r()}function r(){for(var n,e=0;e<i.length;e++){for(var r=i[e],t=!0,o=1;o<r.length;o++){var l=r[o];0!==a[l]&&(t=!1)}t&&(i.splice(e--,1),n=s(s.s=r[0]))}return n}var t={},a={app:0},i=[];function s(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=n,s.c=t,s.d=function(n,e,r){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},s.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"===typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)s.d(r,t,function(e){return n[e]}.bind(null,t));return r},s.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/portfolio/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],l=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var d=l;i.push([0,"chunk-vendors"]),r()})({0:function(n,e,r){n.exports=r("56d7")},"2f8d":function(n,e,r){},"2f91":function(n,e,r){},"3ebc":function(n,e,r){},"4fdf":function(n,e,r){"use strict";r("2f8d")},"52b5":function(n,e,r){},"56d7":function(n,e,r){"use strict";r.r(e);r("e260"),r("e6cf"),r("cca6"),r("a79d");var t=r("7a23"),a={id:"container"},i=Object(t["f"])("h1",null,"Portfolio",-1),s=Object(t["f"])("h3",null,"by Sasu Salonen",-1);function o(n,e,r,o,l,c){var d=Object(t["v"])("NavBar"),p=Object(t["v"])("router-view");return Object(t["o"])(),Object(t["c"])("div",a,[i,s,Object(t["f"])(d),Object(t["f"])(p)])}var l=Object(t["C"])("data-v-0e4ea8e0"),c=l((function(n,e,r,a,i,s){var o=Object(t["v"])("Button");return Object(t["o"])(),Object(t["c"])("nav",null,[Object(t["f"])(o,{label:"Profiili",class:"p-button-raised",onClick:e[1]||(e[1]=function(e){n.$router.push({path:"/profile"})})}),Object(t["f"])(o,{label:"Koodi",class:"p-button-raised",onClick:e[2]||(e[2]=function(e){n.$router.push({path:"/code"})})}),Object(t["f"])(o,{label:"Musiikki",class:"p-button-raised",onClick:e[3]||(e[3]=function(e){n.$router.push({path:"/music"})})}),Object(t["f"])(o,{label:"Itsearviointi",class:"p-button-raised",onClick:e[4]||(e[4]=function(e){n.$router.push({path:"/selfevaluation"})})})])})),d={name:"NavBar"};r("cec0");d.render=c,d.__scopeId="data-v-0e4ea8e0";var p=d,u={name:"App",components:{NavBar:p}};r("cd41");u.render=o;var m=u,h=r("6c02"),v=r("b0df"),g=r.n(v),y=Object(t["C"])("data-v-d14adf22");Object(t["r"])("data-v-d14adf22");var k={id:"container"},f=Object(t["f"])("div",{id:"flex"},[Object(t["f"])("div",{id:"profileinfo"},[Object(t["f"])("h2",null,"Profiili"),Object(t["f"])("p",null,[Object(t["f"])("b",null,"Nimi:"),Object(t["e"])(" Sasu Salonen")]),Object(t["f"])("p",null,[Object(t["f"])("b",null,"Ikä:"),Object(t["e"])(" 32v")]),Object(t["f"])("p",null,[Object(t["f"])("b",null,"Opiskelupaikka:"),Object(t["e"])(" Jyväskylän ammattikorkeakoulu")]),Object(t["f"])("p",null,[Object(t["f"])("b",null,"Tutkinto-ohjelma:"),Object(t["e"])(" Tietojenkäsittelyn Tradenomi")]),Object(t["f"])("p",null,[Object(t["f"])("b",null,"Opiskelijatunnus:"),Object(t["e"])(" n4005")])]),Object(t["f"])("div",{id:"imageDiv"},[Object(t["f"])("img",{id:"meImage",src:g.a,width:"250"})])],-1),b=Object(t["f"])("div",{id:"infotext"},[Object(t["f"])("p",{class:"pInfotext"},"Olen toisen vuoden opiskelija Jyväskylän ammattikorkeakoulussa Tietojenkäsittelyn Tradenomi linjalla. Suuntaudun opinnoissani Web-sovelluskehitys puolelle. Tähän mennessä olen opiskellut mm. HTML, CSS, JavaScript, Java, C#, PHP ja MySQL ohjelmointikieliä. Erilaisista ympäristöistä tutuksi on tullut mm. Angular, React, Vue.js, Visual Studio, Android Studio sekä Unity. "),Object(t["f"])("p",{class:"pInfotext"},"2021 vuoden keväällä työskentelemme Ticorporate Demo Lab projektien parissa. Olen mukana tekemässä asiakastyönä Web-sovellusta Trigenda Oy nimiselle yritykselle. Työskentelen projektissa koodarina ja tulevaisuudessa toiveena on tehdä töitä koodaamisen parissa. Käytämme Trigenda Oy:n projektissa Vue.js sovelluskehystä ja myös tämä portfolio sivusto on toteutettu Vue.js:llä. "),Object(t["f"])("p",{class:"pInfotext"},"Sivutyönä Ticorporatessa teen musiikkeja Robo Hitman peliin. Robo Hitman on toisen tiimin luoma Unity peli. Minulla on ennestään musiikillista taustaa ja pääsen hyvin hyödyntämään sitä tässä projektissa. ")],-1);Object(t["p"])();var j=y((function(n,e,r,a,i,s){return Object(t["o"])(),Object(t["c"])("div",k,[f,b])})),w={name:"Profile"};r("4fdf");w.render=j,w.__scopeId="data-v-d14adf22";var x=w,O=Object(t["C"])("data-v-715e971a");Object(t["r"])("data-v-715e971a");var C={id:"container"},S={class:"flex"},T={class:"flex secondMenu"},A={key:0,class:"content"},I=Object(t["f"])("p",null,"Projektin alkuvaiheessa suunnittelimme sovellukseen fysiikkapohjaisia Trigenda-kortteja. Löysimme Matter.js kirjaston, jonka toimintaa testasin käytännössä Vue.js ympäristössä.",-1),M=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538002236?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Matter.js testi"},null,-1),P={key:1,class:"content"},B=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538531432?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 1 Old"},null,-1),V=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538531641?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 1 and 2"},null,-1),D=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538531471?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 2 Overlay"},null,-1),E={key:2,class:"content"},H=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538531522?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Summary"},null,-1),_={key:3,class:"content"},L=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538531597?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Save PDF"},null,-1),F={key:4,class:"content"},N=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/538531354?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Login"},null,-1),R={key:5,class:"content"},z={key:6,class:"content"},W={key:7,class:"content"};Object(t["p"])();var K=O((function(n,e,r,a,i,s){return Object(t["o"])(),Object(t["c"])("div",C,[Object(t["f"])("div",S,[Object(t["f"])("h2",{class:["subMenu",{chosen:0===a.state.visibleContent}],onClick:e[1]||(e[1]=function(n){return a.toggleVisibility(0)})},"MATTER.JS",2),Object(t["f"])("h2",{class:["subMenu",{chosen:1===a.state.visibleContent}],onClick:e[2]||(e[2]=function(n){return a.toggleVisibility(1)})},"PHASE 1 JA 2",2),Object(t["f"])("h2",{class:["subMenu",{chosen:2===a.state.visibleContent}],onClick:e[3]||(e[3]=function(n){return a.toggleVisibility(2)})},"SUMMARY",2),Object(t["f"])("h2",{class:["subMenu",{chosen:3===a.state.visibleContent}],onClick:e[4]||(e[4]=function(n){return a.toggleVisibility(3)})},"SAVE PDF",2)]),Object(t["f"])("div",T,[Object(t["f"])("h2",{class:["subMenu",{chosen:4===a.state.visibleContent}],onClick:e[5]||(e[5]=function(n){return a.toggleVisibility(4)})},"LOGIN",2),Object(t["f"])("h2",{class:["subMenu",{chosen:5===a.state.visibleContent}],onClick:e[6]||(e[6]=function(n){return a.toggleVisibility(5)})},"USER SERVICE",2),Object(t["f"])("h2",{class:["subMenu",{chosen:6===a.state.visibleContent}],onClick:e[7]||(e[7]=function(n){return a.toggleVisibility(6)})},"ROUTER",2),Object(t["f"])("h2",{class:["subMenu",{chosen:7===a.state.visibleContent}],onClick:e[8]||(e[8]=function(n){return a.toggleVisibility(7)})},"DBMETHODS",2)]),0===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",A,[I,M,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.matterjs},null,8,["innerHTML"])])):Object(t["d"])("",!0),1===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",P,[B,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.phase1backup1},null,8,["innerHTML"]),V,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.phase1demo2},null,8,["innerHTML"]),D,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.phase2demo2},null,8,["innerHTML"]),Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.overlaydemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0),2===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",E,[H,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.summarydemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0),3===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",_,[L,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.savepdfdemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0),4===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",F,[N,Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.logindemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0),5===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",R,[Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.userservicedemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0),6===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",z,[Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.backendrouterdemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0),7===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",W,[Object(t["f"])("p",{class:"preFormatted",innerHTML:a.state.dbmethodsdemo2},null,8,["innerHTML"])])):Object(t["d"])("",!0)])})),J=r("c197"),U=r.n(J),G=(r("8009"),r("416b"),r("f393"),r("cf19"),r("826c"),r("6217"),r("8e9b"),r("867a"),r("a878"),'<template>\r\n  <div class="testi">\r\n    Test\r\n  </div>\r\n</template>\r\n'),q="<script>\r\nimport Matter from 'matter-js';\r\n\r\nlet engine = Matter.Engine.create();\r\nlet world = engine.world;\r\nlet box = Matter.Bodies.polygon(100, 100, 3, 40, {\r\n  render: {\r\n    fillStyle: 'red',\r\n    strokeStyle: 'blue',\r\n    lineWidth: 3,\r\n  },\r\n});\r\n\r\nbox.friction = 0.1;\r\nbox.frictionAir = 0.03;\r\nbox.frictionStatic = 0.5;\r\n\r\nlet box2 = Matter.Bodies.polygon(400, 100, 3, 40, {\r\n  restitution: 0.95,\r\n  render: {\r\n    fillStyle: '#000000',\r\n    text: {\r\n      fillStyle: '#FFFFFF',\r\n      content: 'Test',\r\n      size: 72,\r\n      family: 'Papyrus',\r\n    },\r\n  },\r\n});\r\n\r\nbox2.friction = 0.1;\r\nbox2.frictionAir = 0.03;\r\nbox2.frictionStatic = 0.5;\r\n\r\nconsole.log(box2);\r\n\r\nlet circle = Matter.Bodies.circle(600, 200, 60);\r\n\r\ncircle.render.sprite.texture =\r\n  'https://images-na.ssl-images-amazon.com/images/I/418aO%2BxDr%2BL._AC_.jpg';\r\ncircle.render.fillStyle = false;\r\ncircle.render.sprite.xScale = 0.4;\r\ncircle.render.sprite.yScale = 0.4;\r\ncircle.render.opacity = 1;\r\n\r\nlet wallTop = Matter.Bodies.rectangle(0, 0, 2000, 100, { isStatic: true });\r\nlet wallLeft = Matter.Bodies.rectangle(0, 0, 100, 2000, { isStatic: true });\r\nlet wallRight = Matter.Bodies.rectangle(800, 0, 100, 2000, { isStatic: true });\r\nlet wallBottom = Matter.Bodies.rectangle(0, 600, 2000, 100, { isStatic: true });\r\n\r\nlet render = Matter.Render.create({\r\n  element: document.body,\r\n  engine: engine,\r\n  options: {\r\n    wireframes: false,\r\n    background: 'rgb(255,255,255)',\r\n  },\r\n});\r\n\r\nworld.gravity.x = 0;\r\nworld.gravity.y = 0;\r\n\r\nMatter.World.add(world, [\r\n  box,\r\n  box2,\r\n  circle,\r\n  wallTop,\r\n  wallLeft,\r\n  wallRight,\r\n  wallBottom,\r\n]);\r\n\r\nlet mouse = Matter.Mouse.create(render.canvas),\r\n  mouseConstraint = Matter.MouseConstraint.create(engine, {\r\n    mouse: mouse,\r\n    constraint: {\r\n      stiffness: 0.2,\r\n      render: {\r\n        visible: false,\r\n      },\r\n    },\r\n  });\r\n\r\nMatter.World.add(world, mouseConstraint);\r\n\r\nMatter.Engine.run(engine);\r\nMatter.Render.run(render);\r\n\r\nexport default {\r\n  name: 'Testi',\r\n  props: {\r\n    msg: String,\r\n  },\r\n};\r\n<\/script>\r\n",Y='\x3c!-- Add "scoped" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n</style>\r\n',$='<template>\r\n  <h1>Phase 1</h1>\r\n  <div class="TrigendaBoard">\r\n    <div id="top">\r\n        <img src="../assets/triangles/TurkoosiKolmio.png" class="triangleimg" id="voimavaraimg">\r\n        <input @click="saveSelection(\'Voimavara\')" type="button" class="trigendaButton" value="Voimavara" />\r\n    </div>\r\n    <div id="bottomLeft">\r\n        <img src="../assets/triangles/OranssiKolmio.png" class="triangleimg" id="ongelmaimg">\r\n        <input @click="saveSelection(\'Ongelma\')" type="button" class="trigendaButton" value="Ongelma" />\r\n    </div>\r\n    <div id="bottomCenter">\r\n        <img src="../assets/triangles/KeltanenKolmio.png" class="triangleimg" id="haasteimg">\r\n        <input @click="saveSelection(\'Haaste\')" type="button" class="trigendaButton" value="Haaste" />\r\n    </div>\r\n    <div id="bottomRight">\r\n        <img src="../assets/triangles/VihreeKolmio.png" class="triangleimg" id="toiveimg">\r\n        <input @click="saveSelection(\'Toive\')" type="button" class="trigendaButton" value="Toive" />\r\n    </div>\r\n  </div>\r\n  <div id="cardElement">\r\n    <Card :description="state.currentCard.description"/>\r\n    <input @click="saveSelection(\'EnOsaaSanoa\')" type="button" id="enosaasanoa" value="En osaa sanoa" />\r\n  </div>\r\n  <p>Kortteja nostettu {{state.cardsDrawn+1}}</p>\r\n</template>\r\n',X='<script>\r\n\r\nimport Card from "./Card.vue"\r\nimport deck from "../deck.json"\r\nimport {reactive} from "vue"\r\n\r\nexport default {\r\n    name: "Phase1",\r\n    props: {\r\n        msg: String,\r\n    },\r\n    components: {\r\n        Card\r\n    },\r\n    setup(props, {emit}) {\r\n        localStorage.removeItem("cardArrayPhase1");\r\n\r\n        /**\r\n         * Constant state is made a reactive object, which means when you change it\'s\r\n         * properties, the changes show reactively in the template as well\r\n         *\r\n         * cardsDrawn tells how many cards have the user gone through\r\n         * currentCard tells the description of the currenlty shown card\r\n         */\r\n        const state = reactive({cardsDrawn: 0, currentCard: deck.cards[0]})\r\n\r\n        /**\r\n         * Function saveSelection saves the card index number in the deck.cards array\r\n         * and where the user placed the card in the browser\'s localStorage.\r\n         * This will be changed later to save the selection to a database.\r\n         *\r\n         * Each template card placing button calls saveSelection with different\r\n         * selection parameter which tells where the card was placed. \r\n         */\r\n        const saveSelection = (selection) => {\r\n\r\n            /**\r\n             * If there are still cards which haven\'t been saved, save the current\r\n             * card\'s selection, else emit "phasecomplete" to the parent component\r\n             * to get to the next phase\r\n             */\r\n            console.log(state.cardsDrawn, deck.cards.length);\r\n\r\n            const saveData = {card: state.currentCard, selection: selection};\r\n            let cardArray = [];\r\n\r\n            if (localStorage.getItem("cardArrayPhase1"))\r\n                cardArray = JSON.parse(localStorage.getItem("cardArrayPhase1"));\r\n\r\n            cardArray.push(saveData);\r\n            localStorage.setItem("cardArrayPhase1", JSON.stringify(cardArray));\r\n\r\n            if (state.cardsDrawn == deck.cards.length - 1) {\r\n                emit("phasecomplete");\r\n                return;\r\n            }\r\n\r\n            state.cardsDrawn++;\r\n\r\n            state.currentCard = deck.cards[state.cardsDrawn];\r\n\r\n            console.log(cardArray);\r\n\r\n        }\r\n\r\n        return {deck, state, saveSelection}\r\n    },\r\n    emits: [\'phasecomplete\'],\r\n};\r\n<\/script>\r\n',Z='\x3c!-- Add "scoped" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\n\r\na {\r\n  color: #42b983;\r\n}\r\n\r\n.TrigendaBoard {\r\n    display: grid;\r\n    grid-template-columns: auto auto auto;\r\n    justify-content: center;\r\n}\r\n\r\n.TrigendaBoard div {\r\n    width: 200px;\r\n}\r\n\r\n#bottomCenter input {\r\n    bottom: 8em;\r\n}\r\n\r\n.triangleimg {\r\n    width: 12em;\r\n}\r\n\r\n.trigendaButton {\r\n    position: relative;\r\n    bottom: 5em;\r\n}\r\n\r\n#haasteimg {\r\n    transform: rotate(180deg);\r\n}\r\n\r\n#top {\r\n    grid-row-start: 1;\r\n    grid-column-start: 2;\r\n}\r\n\r\n#bottomLeft {\r\n    grid-row-start: 2;\r\n    grid-row-end: 2;\r\n}\r\n\r\n#bottomRight {\r\n    grid-row-start: 2;\r\n    grid-row-end: 2;\r\n}\r\n\r\n#bottomCenter {\r\n    grid-row-start: 2;\r\n    grid-row-end: 2;\r\n}\r\n#cardElement {\r\n    position: relative;\r\n}\r\n#enosaasanoa {\r\n    background-color: rgb(255, 255, 170);\r\n    border-style: none;\r\n    font-size: 17px;\r\n    width: 170px;\r\n    height: 30px;\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 200px;\r\n}\r\n\r\n</style>\r\n',Q='<template>\r\n    <div class="container wrapper" :class="[state.mouseClass, state.fadeClass, state.visibilityClass]">\r\n        <div class="split">\r\n            <Tip class="temporary" v-if="!state.backToStart && props.showInfo" :tipMsg="state.tipMsg[state.tipIndex]" :mood="state.tipMood" />\r\n            <div class="splitContainer">\r\n                <div class="card" v-if="!state.backToStart" :class="[state.cardFade]">\r\n                    <div id="cardElement">\r\n                        <Card :description="state.currentCard.description"/>\r\n                    </div>\r\n                    <p class="unselectable">Kortteja jäljellä: {{ decks[props.chosenDeck].cards.length - state.cardsDrawn }}</p>\r\n                </div>\r\n                <div class="content temporary">\r\n                    <div v-if="!state.backToStart" class="helpText">\r\n                    <p class ="unselectable"><span class="bold">Voimavarat </span>ovat asioita, joista koet saavasi voimaa ja jotka auttavat sinua elämän eri konteksteissa. </p>\r\n                    <p class ="unselectable"><span class="bold">Toiveilla </span>tarkoitetaan asioita ja ominaisuuksia, joita toivoisit saavuttavasi elämäsi aikana. Toiveet voivat olla myös asioita, joita sinulla jo elämässäsi on ja joiden toivoisit elämässäsi säilyvän. </p>\r\n                    <p class ="unselectable"><span class="bold">Haaste </span>on elämääsi ja/tai elämäsi eri osa-alueita jollakinlailla haastava asia/ominaisuus. Haasteet voidaan kokea ja nähdä myös jokseenkin positiivisina asioina, jotka esimerkiksi saavat sinut toimimaan tehokkaammin. </p>\r\n                    <p class ="unselectable"><span class="bold">Ongelmat </span>taas ovat jo selkeästi elämääsi ja elämäsi osa-alueita kuormittavia asioita/ominaisuuksia. Ongelmat ovat selkeästi asioita, joihin tulee saada selkeä ratkaisu nopeallakin aikataululla ja joiden ratkaisemisessa voidaan tarvita ulkopuolista apua (esim. ystävät, yhteisö, terveydenhuolto).</p>\r\n                    </div>\r\n                </div>\r\n                <div class="startOverMessage" v-if="state.backToStart">\r\n                    <p>Valitse kategorioihin <b>HAASTE</b>, <b>TOIVE</b> ja <b>ONGELMA</b> yhteensä vähintään 2 korttia\r\n                    ja kategoriaan <b>VOIMAVARA</b> vähintään 2 korttia, jotta saamme keskustelusta mahdollisimman\r\n                    kattavan.</p>\r\n                    <button class="btn" @click="startOver">Takaisin alkuun</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class="split">\r\n            <div v-if="!state.backToStart" class="content">\r\n                <img class="background-image" src="../assets/alusta.png" alt="Trigenda-triangle">\r\n                <div class="trigendaBoard-container buttons">\r\n                    <div id="trigendaBoard" :class="[state.triangleFade]">\r\n                        <div class="first">\r\n                            <div>\r\n                                <div\r\n                                    @mouseover="hover1 = true"\r\n                                    @mouseleave="hover1 = false"\r\n                                    class="triangle" @click="saveSelection(\'Voimavara\')">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                                @mouseover="hover2 = true"\r\n                                @mouseleave="hover2 = false"\r\n                                class="triangle" @click="saveSelection(\'Haaste\')">\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                                @mouseover="hover3 = true"\r\n                                @mouseleave="hover3 = false"\r\n                                class="triangle" @click="saveSelection(\'Toive\')">\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                                @mouseover="hover4 = true"\r\n                                @mouseleave="hover4 = false"\r\n                                class="triangle" @click="saveSelection(\'Ongelma\')">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class="trigendaBoard-container backgrounds">\r\n                    <div id="trigendaBoard" :class="[state.triangleFade]">\r\n                        <div class="first">\r\n                            <div>\r\n                                <div\r\n                                :class="{ highlight: hover1 }"\r\n                                class="triangle-background"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                            :class="{ highlight: hover2 }"\r\n                            class="triangle-background"></div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                            :class="{ highlight: hover3 }"\r\n                            class="triangle-background"></div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                            :class="{ highlight: hover4 }"\r\n                            class="triangle-background"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <button @click="saveSelection(\'EnOsaaSanoa\')" class="btn" id="next">En osaa sanoa</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n',nn="<script>\r\nimport Card from \"./Card.vue\";\r\nimport decks from \"../decks.json\";\r\nimport Tip from '../components/Tip.vue';\r\nimport {reactive} from \"vue\";\r\n\r\nexport default {\r\n    name: 'Phase1',\r\n    components: {\r\n        Card,\r\n        Tip\r\n    },\r\n    data() {\r\n        return {\r\n            hover1: false,\r\n            hover2: false,\r\n            hover3: false,\r\n            hover4: false,\r\n        }\r\n    },\r\n    props: {\r\n        // Index of the chosen deck in decks.json\r\n        chosenDeck: Number,\r\n        showInfo: Boolean\r\n    },\r\n    setup(props, {emit}) {\r\n        localStorage.removeItem(\"cardArray\");\r\n        localStorage.removeItem(\"feedbackCards\");\r\n        localStorage.removeItem(\"summaryAnswers\");\r\n        localStorage.removeItem(\"deckInfo\");\r\n\r\n        /**\r\n         * Constant state is made a reactive object, which means when you change it's\r\n         * properties, the changes show reactively in the template as well.\r\n         *\r\n         * if backToStart is true, the message to choose at least total of 2 cards in\r\n         * Challenge, Wish and Problem cards and total of 2 cards in Asset cards is shown at\r\n         * the end of Phase 1.\r\n         *\r\n         * tipMsg and tipMood are passed as props to Tip component to show a message and set\r\n         * Tringo's mood. Mood can be 'happy', 'confused' or 'sad'.\r\n         * tipIndex tells which message will be passed to Tip component from tipMsg array.\r\n         */\r\n        const state = reactive({\r\n            // How many cards have the user gone through\r\n            cardsDrawn: 0,\r\n            // Card that is currently showing\r\n            currentCard: decks[props.chosenDeck].cards[0],\r\n            // Fade effect CSS class for Container div. ('fadeIn' or 'fadeOut')\r\n            fadeClass: null,\r\n            // Visibility CSS class for Container div. ('visible' or 'hidden')\r\n            visibilityClass: 'hidden',\r\n\r\n            /**\r\n             * Mouse CSS class for Container div,\r\n             * tells if mouse clicks are enabled or disabled. ('mouseEnabled' or 'mouseDisabled')\r\n             */\r\n            mouseClass: 'mouseDisabled',\r\n            backToStart: false,\r\n            tipMsg: [\r\n                ['Hienoa, olet siirtynyt keskustelun ensimmäiseen vaiheeseen.','Hiljaisen, intuitiivisen työskentelyn vaiheessa saat jäsentää omia ajatuksiasi valittuun teemaan liittyen yksittäisten käsitekorttien avulla. Tehtävänäsi on sijoittaa käsitekortti johonkin neljästä sektorista.'],\r\n                ['Pyrithän valitsemaan vähintään kaksi voimavaraa, yhden ongelman ja yhden haasteen.', 'Jos kortti ei mielestäsi sovellu mihinkään lokeroon, voit valita \"en osaa sanoa\".']\r\n            ],\r\n            tipIndex: 0,\r\n            tipMood: 'happy',\r\n        });\r\n\r\n        const fadeInElements = () => {\r\n            state.fadeClass = 'fadeIn'\r\n            state.visibilityClass = 'visible'\r\n            setTimeout(() => {\r\n                state.mouseClass = 'mouseEnabled';\r\n            }, 200);\r\n        }\r\n\r\n        const fadeOutElements = () => {\r\n            state.fadeClass = 'fadeOut'\r\n            state.mouseClass = 'mouseDisabled';\r\n            setTimeout(() => {\r\n                emit(\"phasecomplete\");\r\n            }, 200);\r\n        }\r\n        fadeInElements();\r\n\r\n        /**\r\n         * Function saveSelection saves the current card\r\n         * and where the user placed the card in the browser's localStorage.\r\n         * !! THIS WILL BE CHANGED LATER TO SAVE THE INFORMATION TO DATABASE !!\r\n         *\r\n         */\r\n        const saveSelection = (selection) => {\r\n            if (state.tipIndex < 1)\r\n                state.tipIndex++;\r\n\r\n            const saveData = {...state.currentCard, phase1selection: selection};\r\n            let cardArray = [];\r\n\r\n            if (localStorage.getItem(\"cardArray\"))\r\n                cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n            cardArray.push(saveData);\r\n            localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n            if (state.cardsDrawn == decks[props.chosenDeck].cards.length - 1) {\r\n\r\n                /**\r\n                 * If all the cards have been saved, show Fade out effect and\r\n                 * emit 'phasecomplete' to the parent component to get to the next phase\r\n                 */\r\n                const phaseSuccessful = checkIfPhaseSuccessful();\r\n                if (phaseSuccessful)\r\n                    fadeOutElements();\r\n                else\r\n                    state.backToStart = true;\r\n            }\r\n\r\n            state.cardsDrawn++;\r\n            // Set next card to be current card if there are cards left in the deck\r\n            if (state.cardsDrawn < decks[props.chosenDeck].cards.length)\r\n                state.currentCard = decks[props.chosenDeck].cards[state.cardsDrawn];\r\n        }\r\n\r\n        const checkIfPhaseSuccessful = () => {\r\n\r\n            /**\r\n             * When there are no cards left, check if there are total of 2 cards\r\n             * in Challenge, Wish and Problem cards and total of 2 cards in\r\n             * Asser cards. If so, continue to Phase 2, otherwise start over Phase 1.\r\n             */\r\n            let challengeWishProblemCount = 0;\r\n            let assetCount = 0;\r\n            const cardArray = JSON.parse(localStorage.getItem('cardArray'));\r\n\r\n            /**\r\n             * Count total cards in Challenge, Wish and Problem cards.\r\n             * Count total cards in Asset cards.\r\n             */\r\n            cardArray.forEach(card => {\r\n                if (card.phase1selection === 'Haaste' ||\r\n                    card.phase1selection === 'Toive' ||\r\n                    card.phase1selection === 'Ongelma')\r\n                    challengeWishProblemCount++;\r\n                else if (card.phase1selection === 'Voimavara')\r\n                    assetCount++;\r\n            });\r\n\r\n            if (challengeWishProblemCount < 2 || assetCount < 2)\r\n                return false;\r\n            else\r\n                return true;\r\n        }\r\n\r\n        const startOver = () => {\r\n            localStorage.removeItem(\"cardArray\");\r\n            state.cardsDrawn = 0;\r\n            state.currentCard = decks[props.chosenDeck].cards[0];\r\n            state.backToStart = false;\r\n            state.tipIndex = 0;\r\n        }\r\n\r\n        const saveDeckInfo = () => {\r\n            const deckInfo = {\r\n                name: decks[props.chosenDeck].name,\r\n                type: decks[props.chosenDeck].type,\r\n                language: decks[props.chosenDeck].language\r\n            }\r\n\r\n            localStorage.setItem(\"deckInfo\", JSON.stringify(deckInfo));\r\n        }\r\n\r\n        saveDeckInfo();\r\n\r\n        return { decks, state, saveSelection, startOver, checkIfPhaseSuccessful, fadeOutElements, props, saveDeckInfo };\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n<\/script>\r\n",en="\x3c!-- Add 'scoped' attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\n    .wrapper {\r\n        display: flex;\r\n        height: 90vh;\r\n    }\r\n\r\n    .unselectable {\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    }\r\n\r\n    .split {\r\n        width: 50%;\r\n        height: 89.1vh;\r\n        justify-content: center;\r\n        padding: 10px;\r\n    }\r\n\r\n    .split div {\r\n        position: relative;\r\n    }\r\n\r\n    .split .splitContainer {\r\n        top: 17%;\r\n    }\r\n\r\n    .split.split:nth-child(2) .content {\r\n        margin-top: 130px;\r\n    }\r\n\r\n    .split:nth-child(2) {\r\n        background-image: url('../assets/tausta_blue.jpg');\r\n        background-size: cover;\r\n        background-repeat: no-repeat;\r\n    }\r\n    .split:first-child {\r\n        background-color: var(--left);\r\n    }\r\n\r\n    .card {\r\n        margin-top: 40px;\r\n        margin-bottom: 70px;\r\n    }\r\n\r\n    .helpText {\r\n        text-align: left;\r\n        margin: 0 auto;\r\n        width: 80%;\r\n        /*overflow-y: scroll;*/\r\n        max-height: 9.375em;\r\n    }\r\n\r\n    .helpText p {\r\n        margin: 2px 0;\r\n    }\r\n\r\n    .mouseDisabled {\r\n        pointer-events: none;\r\n    }\r\n\r\n    .mouseEnabled {\r\n        pointer-events: auto;\r\n    }\r\n\r\n    .background-image {\r\n        position: relative;\r\n        width: 459px;\r\n        z-index: 30;\r\n        user-select: none;\r\n    }\r\n\r\n    .trigendaBoard-container {\r\n        position: absolute !important;\r\n        z-index: 30;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 90%;\r\n    }\r\n\r\n    #trigendaBoard {\r\n        position: relative;\r\n        width: 459px;\r\n        height: 400px;\r\n        margin: 30px auto;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    #trigendaBoard div {\r\n        padding: 10px;\r\n        width: 130px;\r\n        height: 135px;\r\n        margin: auto;\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(1) {\r\n        width: 100%;\r\n        margin: auto;\r\n        padding: 0 30px;\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(1) div {\r\n        width: 90px;\r\n    }\r\n\r\n    .triangle {\r\n        clip-path: polygon(50% 0%, 10% 100%, 90% 100%);\r\n        position: absolute !important;\r\n        margin: 0 !important;\r\n        width: 100% !important;\r\n        height: 100% !important;\r\n        top: -10px !important;\r\n        left: -30px !important;\r\n        transition: 250ms background-color ease;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .triangle-background {\r\n        clip-path: polygon(50% 0%, 0% 90%, 100% 90%);\r\n        position: absolute !important;\r\n        background-color: var(--white);\r\n        margin: 0 !important;\r\n        width: 70% !important;\r\n        height: 100% !important;\r\n        top: -10px !important;\r\n        left: -10px !important;\r\n        transition: background-color 250ms ease;\r\n    }\r\n\r\n    .backgrounds #trigendaBoard div:nth-child(1) div {\r\n        transform: translateY(-12px);\r\n    }\r\n\r\n    .backgrounds #trigendaBoard div:nth-child(3) div {\r\n        transform: rotate(180deg) translateY(30px) translateX(-5px) scale(1.1);\r\n    }\r\n\r\n    .backgrounds {\r\n        z-index: 1;\r\n    }\r\n\r\n    .buttons {\r\n        z-index: 50;\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(1) div {\r\n        transform: translateY(-17px);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(2) div {\r\n        transform: translateX(28px) scaleX(1.05);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(3) div {\r\n        transform: rotate(180deg) translateY(30px);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(3) .triangle {\r\n        transform: rotate(180deg) translateY(10px);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(4) div {\r\n        transform: translateX(-28px) scaleX(1.05);\r\n    }\r\n\r\n    /*.triangle:hover, .triangle:active {\r\n        background-color: var(--btn_hover);\r\n        opacity: 0;\r\n    }*/\r\n\r\n    .highlight {\r\n        background-color: var(--btn_hover);\r\n    }\r\n\r\n    button {\r\n        display: block;\r\n        margin: 30px auto;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        .wrapper {\r\n            flex-direction: column;\r\n        }\r\n\r\n        .split {\r\n            width: 96%;\r\n        }\r\n\r\n        .temporary {\r\n            display: none;\r\n        }\r\n\r\n        .wrapper {\r\n            height: 91vh;\r\n        }\r\n\r\n        .split:nth-child(2) .content {\r\n            margin-top: 0px !important;\r\n        }\r\n\r\n        #trigendaBoard {\r\n            margin-top: 5px;\r\n            margin-bottom: 10px;\r\n            transform: scale(1) translate(1px, 25px);\r\n        }\r\n    }\r\n</style>\r\n",rn='<template>\r\n    <div class="container wrapper" :class="[\r\n                state.fadeClass,\r\n                state.visibilityClass,\r\n                state.mouseClass\r\n            ]">\r\n        <div class="split">\r\n            <div id="ChoiceButtons">\r\n                \x3c!-- Empty divs are used as containers for the conversation triangles. --\x3e\r\n                <div :class="{ highlight: state.progress == 0 }"></div>\r\n                <div :class="{ highlight: state.progress == 2 }"></div>\r\n                <div :class="{ highlight: state.progress == 1 }"></div>\r\n                <div :class="{ highlight: state.progress == 3 }"></div>\r\n                <div v-if="state.progress < 4" id="decks">\r\n                    <div v-if="state.progress <= 1" class="choice global-hover" @click="chooseCardType(\'Haaste\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Haaste</p>\r\n                    </div>\r\n                    <div v-if="state.progress <= 1" class="choice global-hover" @click="chooseCardType(\'Toive\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Toive</p>\r\n                    </div>\r\n                    <div v-if="state.progress <= 1" class="choice global-hover" @click="chooseCardType(\'Ongelma\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Ongelma</p>\r\n                    </div>\r\n                     <div v-if="state.progress > 1" class="choice global-hover" @click="chooseCardType(\'Voimavara\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Voimavara</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class="split">\r\n            <div class="trigenda-wrapper">\r\n                <img src="../assets/Alusta_tumma.png">\r\n                <div id="trigendaBoard">\r\n                    <div>\r\n                        <div v-if="state.progress >= 0" :class="{ triangle2: state.progress > 0 }" class="triangle"></div>\r\n                    </div>\r\n                    <div>\r\n                        <div v-if="state.progress >= 2" :class="{  triangle2: state.progress > 2 }" class="triangle"></div>\r\n                    </div>\r\n                    <div>\r\n                        <div v-if="state.progress >= 1" :class="{  triangle2: state.progress > 1 }" class="triangle"></div>\r\n                    </div>\r\n                    <div>\r\n                        <div v-if="state.progress >= 3" :class="{  triangle2: state.progress > 3 }" class="triangle"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id="tips">\r\n            <p><span class="bold">Tavoite: </span>Tavoite on ongelma, haaste tai toive, jonka pyrimme keskustelussa ratkaisemaan.</p>\r\n            <p><span class="bold">Ongelma: </span>Ongelma hidastaa sinua tavoitteesi saavuttamisessa.</p>\r\n            <p><span class="bold">Voimavara: </span>Koet tämän asian vahvuutenasi, saat siitä voimaa ja se auttaa jaksamaan.</p>\r\n            </div>\r\n            \x3c!-- Show "Next stage" button if state.overlayIsActive is set to false --\x3e\r\n            <Tip v-if="!state.backToStart && props.showInfo" :tipMsg="state.tipMsg[state.progress]" :mood="state.tipMood" />\r\n        </div>\r\n\r\n        \x3c!-- Overlay is a component where card selection and answer choices are\r\n        made for a current card placeholder shown in Phase2 component. Overlay is shown over the\r\n        Phase2 component and Phase2 is shown transparent behind the Overlay.\r\n        --\x3e\r\n        <Overlay v-if="state.overlayVisibility"\r\n            :cardType="state.overlayCardType"\r\n            :selectionType="state.selectionType"\r\n            @deactivateOverlay="deactivateOverlay"\r\n            @phasecomplete="finishPhase"\r\n            @goBack="goBack" />\r\n    </div>\r\n</template>\r\n',tn="\x3c!-- Add \"scoped\" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\n    .wrapper {\r\n        display: flex;\r\n        height: 90vh;\r\n    }\r\n\r\n    .split {\r\n        width: 50%;\r\n        height: 91.2vh;\r\n        justify-content: center;\r\n        margin: auto 0;\r\n    }\r\n    .split:nth-child(2) {\r\n        background-image: url('../assets/tausta_blue.jpg');\r\n        background-size: cover;\r\n        background-repeat: no-repeat;\r\n    }\r\n    .split:first-child {\r\n        background-color: var(--left);\r\n    }\r\n\r\n    .split:nth-child(2) img {\r\n        position: absolute;\r\n        transform: translate(-350px, -75px) scale(0.65);\r\n        z-index: 40;\r\n    }\r\n\r\n    .split:nth-child(2) .content {\r\n        margin-top: 170px;\r\n    }\r\n    .choice{\r\n        width: 80%;\r\n        height: 80%;\r\n    }\r\n    .choice > img{\r\n        width: 80%;\r\n    }\r\n\r\n    p {\r\n        margin:0;\r\n    }\r\n    #tips{\r\n        text-align:left;\r\n        width: 90%;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        margin-top: 5em;\r\n    }\r\n\r\n    #decks{\r\n        display: inline-flex;\r\n    }\r\n\r\n    #ChoiceButtons{\r\n        margin-top: 15em;\r\n    }\r\n\r\n    .trigenda-wrapper {\r\n        margin-top: 16%;\r\n    }\r\n\r\n    #trigendaBoard{\r\n        width: 459px;\r\n        height: 400px;\r\n        margin: 30px auto;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n    #trigendaBoard div {\r\n        padding: 10px;\r\n        width: 90px;\r\n        height: 100px;\r\n        margin: auto;\r\n        transform: scale(1.17);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(1) {\r\n        width: 100%;\r\n        margin: auto;\r\n        padding: 0 30px;\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(1) div {\r\n        width: 90px;\r\n        position: relative;\r\n        top: -5px;\r\n        z-index: 10px;\r\n        transform: translateY(24px) translateX(1px) scale(1.2);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(2) div {\r\n        position: relative;\r\n        top: 5px;\r\n        transform: translateY(22px) translateX(-2px) scale(1.2);\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(3) div {\r\n        transform: rotate(180deg) scale(1.2) translateY(-20px);\r\n        position: relative;\r\n        right: 29px;\r\n    }\r\n\r\n    #trigendaBoard div:nth-child(4) div {\r\n        position: relative;\r\n        right: 58px;\r\n        top: 5px;\r\n        transform: translateY(22px) translateX(-2px) scale(1.2);\r\n    }\r\n\r\n    .triangle {\r\n        width: 40px;\r\n        height: 80px;\r\n        clip-path: polygon(50% 0%, 10% 100%, 90% 100%);\r\n        transition: 250ms background-color ease;\r\n        background-color: var(--btn_hover);\r\n    }\r\n    .triangle2{\r\n        background-color: white;\r\n    }\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        .wrapper {\r\n            flex-direction: column;\r\n        }\r\n\r\n        .split {\r\n            width: 100%;\r\n        }\r\n\r\n        .temporary {\r\n            display: none;\r\n        }\r\n    }\r\n</style>\r\n",an="<script>\r\n\r\nimport Card from \"./Card.vue\";\r\nimport Answer from \"./Answer.vue\";\r\nimport Overlay from \"./Overlay.vue\";\r\nimport Tip from './Tip.vue';\r\nimport { reactive } from \"vue\";\r\nimport Summary from './Summary.vue';\r\n\r\nexport default {\r\n    name: \"Phase2\",\r\n    props: {\r\n        msg: String,\r\n        showInfo: Boolean\r\n    },\r\n    components: {\r\n        Card,\r\n        Answer,\r\n        Overlay,\r\n        Tip,\r\n        Summary\r\n    },\r\n    setup(props, { emit } ) {\r\n\r\n        const state = reactive({\r\n            // Fade effect CSS class for Container div. ('fadeIn' or 'fadeOut')\r\n            fadeClass: null,\r\n            // Visibility CSS class for Container div. ('visible' or 'hidden')\r\n            visibilityClass: 'hidden',\r\n\r\n            /**\r\n             * Mouse CSS class for Container div,\r\n             * tells if mouse clicks are enabled or disabled. ('mouseEnabled' or 'mouseDisabled')\r\n             */\r\n            mouseClass: 'mouseDisabled',\r\n            // Overlay is shown or hidden based on state.overlayVisibility boolean value.\r\n            overlayVisibility: false,\r\n            // OverlaycardType tells what kind of cards are shown in Overlay's CardSelection component.\r\n            overlayCardType: null,\r\n            // SelectionType tells where the card will be placed in Trigenda triangle.\r\n            selectionType: null,\r\n\r\n            /**\r\n             * SelectionType, Tringo's message are set based on progress index. The \"Next Phase\"\r\n             * button is shown if progress is 4.\r\n             */\r\n            progress: 0,\r\n            cardArray: JSON.parse(localStorage.getItem(\"cardArray\")),\r\n            // Tringo's messages. Strings separated by comma in the arrays creates a line break in the message.\r\n            tipMsg: [\r\n                ['Olet nyt suorittanut keskustelun ensimmäisen vaiheen. Seuraavaksi valitset edellisen vaiheen ongelmista, haasteista tai toiveista kortin keskustelun tavoitteeksi.', 'Tavoite on asia, johon pyrimme keskustelun avulla löytämään ratkaisuja. Tästä eteenpäin pyydän sinua myös avaamaan valintojasi kirjoittamalla tekstikenttiin.'],\r\n                ['Hienoa! Nyt keskustelulla on tavoite. Seuraavaksi valitsemme haasteen, joka hidastaa tämän tavoitteen toteutumista.', 'Sinulla on mahdollisuus valita joko ongelma, haaste tai toive. Tarvittaessa voit tutkia myös edellisen vaiheen \"En osaa sanoa\" -kortteja.'],\r\n                ['Nyt valittuna ovat tavoite sekä haaste. Seuraavaksi alamme ratkomaan haastetta voimavarojasi käyttäen.', 'Valitse seuraavaksi ensimmäinen merkittävä voimavarasi. Tarvittaessa voit tutkia myös edellisen vaiheen \"En osaa sanoa\" -kortteja.'],\r\n                ['Hyvä! Valitsethan vielä toisen voimavaran.'],\r\n            ],\r\n            // Sets the mood of Tringo, passed to Tip component. 'happy', 'confused' or 'sad'\r\n            tipMood: 'happy',\r\n        });\r\n\r\n        const fadeInElements = () => {\r\n            state.fadeClass = 'fadeIn';\r\n            state.visibilityClass = 'visible';\r\n            setTimeout(() => {\r\n                state.mouseClass = 'mouseEnabled';\r\n            }, 200);\r\n        }\r\n\r\n        fadeInElements();\r\n\r\n        const activateOverlay = () => {\r\n            state.overlayVisibility = true;\r\n        }\r\n\r\n        const deactivateOverlay = () => {\r\n            state.overlayVisibility = false;\r\n            state.progress++;\r\n\r\n            if (state.progress === 4)\r\n                finishPhase();\r\n        }\r\n\r\n        const finishPhase = () => {\r\n            emit(\"phasecomplete\");\r\n        }\r\n        const chooseCardType = (cardType) => {\r\n            state.overlayCardType = cardType;\r\n\r\n            if (state.progress === 0)\r\n                state.selectionType = \"Tavoite\"\r\n            else if (state.progress === 1)\r\n                state.selectionType = \"Haaste\"\r\n            else if (state.progress === 2)\r\n                state.selectionType = \"Voimavara1\"\r\n            else if (state.progress === 3)\r\n                state.selectionType = \"Voimavara2\"\r\n            activateOverlay();\r\n        }\r\n        const goBack = () => {\r\n            state.overlayCardType = null;\r\n            state.selectionType = null;\r\n            state.overlayVisibility = false;\r\n        }\r\n        return { activateOverlay, state, deactivateOverlay, finishPhase, chooseCardType, goBack, props };\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n\r\n<\/script>\r\n",sn='<template>\r\n    <div id="answerBox">\r\n        \x3c!-- CardSelection component is for choosing a card to Phase2 current placeholder.\r\n            CardSelection shows cards from cardsToChooseFrom array which is saved in state\r\n            object.\r\n            SelectionType prop tells the placeholder where the card will be placed. --\x3e\r\n        <div>\r\n            <CardSelection\r\n                v-if="state.progress == 0"\r\n                :title="state.propsTitle"\r\n                :cardsToChooseFrom="state.cardsToChooseFrom"\r\n                :selectionType="props.selectionType"\r\n                :dontKnowCardsAreActive="state.dontKnowCardsAreActive"\r\n                :backEnabled="true"\r\n                @saveCardChoice="saveCardChoice"\r\n                @goBack="goBack(\'CardSelection\')" />\r\n        </div>\r\n            \x3c!-- Answer component saves the answer why the card was chosen to the placeholder.\r\n            Card and the title of Answer component is passed by props. --\x3e\r\n        <div class="vert-center">\r\n            <Answer\r\n                v-if="state.progress == 1"\r\n                :title="state.propsTitle"\r\n                :card="state.answerToCard"\r\n                @answer="saveAnswer"\r\n                @goBack="goBack(\'Answer\')" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n',on="<script>\r\n\r\nimport {reactive} from \"vue\";\r\nimport Card from \"./Card.vue\";\r\nimport Answer from \"./Answer.vue\";\r\nimport CardTypeSelection from './CardTypeSelection.vue';\r\nimport CardSelection from './CardSelection.vue';\r\n\r\nexport default {\r\n    name: \"Overlay\",\r\n    components: {\r\n        Card,\r\n        Answer,\r\n        CardTypeSelection,\r\n        CardSelection\r\n    },\r\n    props: {\r\n\r\n        /**\r\n         * CardType is used for the title texts passed to CardSelection and Answer component in \r\n         * template and to choose right types of cards to cardsToChooseFrom array.\r\n         * selectionType tells where the card will be placed in Phase 2.\r\n         */\r\n        cardType: String,\r\n        selectionType: String,\r\n    },\r\n    setup(props, {emit}) {\r\n\r\n        /**\r\n         * State object saves the progress index of the Overlay. The right component is\r\n         * shown to the user based on the progress index.\r\n         * cardsToChooseFrom is passed as a prop to CardSelection component when it's\r\n         * time to choose a card for the placeholder.\r\n         * dontKnowCardsAreActive is boolean value, passed to CardSelection component\r\n         * and tells if a card can be chosen from cards placed to Don't know in Phase 1.\r\n         * propsTitle is the title passed to either CardSelection or Answer component.\r\n         * answerToCard is passed to Answer component. Means which card the\r\n         * answer will be saved to.\r\n         * history array saves the actions user has taken during the overlay so when goBack\r\n         * is called, the right kind of information is deleted from right card based on the history. \r\n         */\r\n        const state = reactive({\r\n            progress: 0,\r\n            cardsToChooseFrom: [],\r\n            dontKnowCardsAreActive: false,\r\n            propsTitle: null,\r\n            answerToCard: null,\r\n            history: [],\r\n        });\r\n\r\n        const saveCardsToChooseFrom = () => {\r\n            const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n            // Set right type of cards to cardsToChooseFrom array\r\n            state.cardsToChooseFrom = cardArray.filter(card => {\r\n                if (card.phase1selection == props.cardType && !card.phase2selection)\r\n                    return card;\r\n            });\r\n\r\n            state.dontKnowCardsAreActive = false;\r\n\r\n            if (props.selectionType === 'Tavoite')\r\n                state.dontKnowCardsAreActive = true;\r\n            else if (props.selectionType === 'Ongelma')\r\n                state.dontKnowCardsAreActive = true;\r\n            else if (props.selectionType === 'Voimavara1')\r\n                state.dontKnowCardsAreActive = true;\r\n            else if (props.selectionType === 'Voimavara2')\r\n                state.dontKnowCardsAreActive = true;\r\n\r\n            state.propsTitle = 'Valitsit aihepiirin ' + props.cardType + '. Minkä kortin haluat käsitellä?';\r\n        }\r\n\r\n        const saveCardChoice = (card, selectionType) => {\r\n\r\n            /**\r\n             * Gets the cardArray from localStorage, finds the right card by id of the card in parameter.\r\n             * Saves the phase2selection to the card and saves the array back to localStorage.\r\n             */\r\n            console.log(card, selectionType)\r\n            const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n            const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === card.id);\r\n\r\n            cardArray[cardToModifyIndex].phase2selection = selectionType;\r\n            localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n\r\n            // Push object to history array. It's used when goBack is called to know what property from which card to delete\r\n            const historyToSave = { modifiedCardId: cardArray[cardToModifyIndex].id, modifiedCardProperty: 'phase2selection' };\r\n            state.history.push(historyToSave);\r\n\r\n            state.answerToCard = card;\r\n\r\n            if (state.answerToCard.phase1selection === \"EnOsaaSanoa\")\r\n                state.propsTitle = 'Valitsit kortin ' + state.answerToCard.description + '. Halutessasi voit perustella valintasi lyhyesti.'\r\n            else\r\n                state.propsTitle = 'Valitsit aihepiirin ' + props.cardType + ' ja sieltä kortin ' + state.answerToCard.description + '. Halutessasi voit perustella valintasi lyhyesti.'\r\n\r\n            state.progress++;\r\n        }\r\n\r\n        const saveAnswer = (card, answer) => {\r\n\r\n            /**\r\n             * Gets the cardArray from localStorage, finds the right card by id of the card in parameter.\r\n             * Saves the answer to the card and saves the array back to localStorage.\r\n             */\r\n            const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n            const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === card.id);\r\n            cardArray[cardToModifyIndex].answer = answer;\r\n            localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n            state.answerToCard = null;\r\n\r\n            emit(\"deactivateOverlay\");\r\n        }\r\n\r\n        const goBack = (from) => {\r\n            // If going back from CardSelection, let Phase 2 component handle goBack\r\n            if (from === \"CardSelection\")\r\n                emit('goBack');\r\n            else if (from === \"Answer\") {\r\n\r\n                /**\r\n                 * If going back from answer component, checks last item in history array,\r\n                 * gets cardArray from localStorage, deletes the right property from right card,\r\n                 * and saves cardArray back to localStorage\r\n                 */\r\n                const modifiedCardId = state.history[state.history.length-1].modifiedCardId;\r\n                const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n                const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === modifiedCardId);\r\n\r\n                if (state.history[state.history.length-1].modifiedCardProperty === \"phase2selection\")\r\n                    delete cardArray[cardToModifyIndex].phase2selection;\r\n\r\n                localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n                state.answerToCard = null;\r\n                state.propsTitle = 'Valitsit aihepiirin ' + props.cardType + '. Minkä kortin haluat käsitellä?';\r\n\r\n                state.progress--;\r\n            }\r\n        }\r\n\r\n        saveCardsToChooseFrom();\r\n        return { state, saveAnswer, saveCardsToChooseFrom, saveCardChoice, props, goBack };\r\n\r\n    },\r\n    emits: ['deactivateOverlay', 'goBack'],\r\n}\r\n\r\n<\/script>\r\n",ln="\x3c!-- Add \"scoped\" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\n\r\nh2 {\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  font-size: 20px;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  width: 80%;\r\n  margin: 0 auto;\r\n}\r\n\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\n\r\na {\r\n  color: var(--link_color);\r\n}\r\n\r\n#answerBox {\r\n    border-style: solid;\r\n    border-width: 0px;\r\n    border-color: rgb(100, 100, 100);\r\n    position: absolute;\r\n    background-color: rgba(120, 120, 120, 0.5);\r\n    border-radius: 3px;\r\n    margin: auto;\r\n    padding-top: 100px;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 100;\r\n}\r\n\r\n.container {\r\n    position: relative;\r\n}\r\n\r\n#answerBox::before {\r\n    content: '';\r\n    margin: auto;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    position: absolute;\r\n    backdrop-filter: blur(3px);\r\n    z-index: -1;\r\n}\r\n\r\n#textBox {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    border-color: rgb(150, 150, 150);\r\n    display: inline-block;\r\n    resize: none;\r\n}\r\n\r\nbutton {\r\n    background-color: rgb(255, 255, 170);\r\n    border-style: none;\r\n    font-size: 17px;\r\n    width: 170px;\r\n    height: 30px;\r\n}\r\n\r\n#backButton {\r\n    display: inline-block;\r\n    position: relative;\r\n    left: -200px;\r\n}\r\n\r\n#answerButton {\r\n    display: inline-block;\r\n    position: relative;\r\n    left: 200px;\r\n}\r\n\r\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\r\n    font-size: 40px;\r\n    color: rgb(180, 180, 180);\r\n    text-align: center;\r\n    transform: translate3d(0, 115px,0);\r\n    opacity: 1; /* Firefox */\r\n}\r\n\r\n.vert-center {\r\n    position: relative;\r\n}\r\n</style>\r\n",cn='<template>\r\n    <div class="container wrapper">\r\n        <div class="split">\r\n            <div id="answers" v-for="(answer, index) in state.summaryAnswers" :key="index">\r\n                <h3>{{ state.answerTitles[answer.id] }}</h3>\r\n                <img src="../assets/pen.png" width="15" @click="editAnswer(index)">\r\n                <p>{{ answer.comment }}</p>\r\n            </div>\r\n            <SummaryAnswer\r\n                :class="{ hidden: state.progress === 4 }"\r\n                :title="state.answerTitles[state.progress]"\r\n                :progress="state.progress"\r\n                :comment="state.answerComment"\r\n                @answer="saveAnswer" />\r\n            <div v-if="state.progress === 4" id="ready">\r\n                <h2>Hienoa! Jos olet valmis, jatka seuraavaan vaiheeseen.<br> Voit halutessasi vielä muokata antamiasi vastauksia.</h2>\r\n                <button @click="finishPhase">Seuraavaan vaiheeseen</button>\r\n            </div>\r\n        </div>\r\n        <div class="split">\r\n            <div id="trigendaBoard">\r\n                <div class="cardDiv">\r\n                    <div id="triangleImage">\r\n                        <h1 id="descBottom">{{ state.goalCard.description }}</h1>\r\n                    </div>\r\n                </div>\r\n                <div id="secondCardRow">\r\n                    <div class="cardDiv">\r\n                        <div id="triangleImage">\r\n                            <h1 id="descBottom">{{ state.assetOneCard.description }}</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div class="cardDiv">\r\n                        <div id="triangleImage">\r\n                            <h1 id="descBottom">{{ state.challengeCard.description }}</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div class="cardDiv">\r\n                        <div id="triangleImage">\r\n                            <h1 id="descBottom">{{ state.assetTwoCard.description }}</h1>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n',dn="<script>\r\nimport Card from './Card.vue';\r\nimport { reactive } from 'vue';\r\nimport SummaryAnswer from './SummaryAnswer.vue';\r\n\r\nexport default {\r\n    name: \"Summary\",\r\n    props: {\r\n        msg: String,\r\n    },\r\n    components: {\r\n        Card,\r\n        SummaryAnswer\r\n    },\r\n    setup(props, { emit }) {\r\n        const state = reactive({\r\n            // Index of the current answer\r\n            progress: 0,\r\n            // Title for SummaryAnswer component, array index based on progress\r\n            answerTitles: ['Keskustelun pääsisällöt, mistä asioista keskusteltiin:',\r\n                'Keskustelussa nousseet tavoitteet ja keinot niiden saavuttamiseksi:',\r\n                'Keskustelun oivallukset:',\r\n                'Vapaa sana:'\r\n            ],\r\n            // Prop to SummaryAnswer, sets the comment for the textbox\r\n            answerComment: '',\r\n\r\n            /**\r\n             * Answer objects in the array, Id property is based on progress and comment is\r\n             * based on given answer in the SummaryAnswer component\r\n             */\r\n            summaryAnswers: [],\r\n            // Cards based on placement in Phase 2\r\n            goalCard: null,\r\n            challengeCard: null,\r\n            assetOneCard: null,\r\n            assetTwoCard: null\r\n        });\r\n\r\n        const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n        state.goalCard = cardArray.find(card => card.phase2selection === 'Tavoite');\r\n        state.challengeCard = cardArray.find(card => card.phase2selection === 'Haaste');\r\n        state.assetOneCard = cardArray.find(card => card.phase2selection === 'Voimavara1');\r\n        state.assetTwoCard = cardArray.find(card => card.phase2selection === 'Voimavara2');\r\n\r\n\r\n        const saveAnswer = (answer) => {\r\n            const oldAnswerIndex = state.summaryAnswers.findIndex(answer => answer.id === state.progress);\r\n\r\n            /**\r\n             * Check if there is already given comment on current answer. This is possible if user is\r\n             * editing an already existing answer.\r\n             * if old comment exists, replace it. Otherwise push a new answer to summaryAnswers\r\n             */\r\n            if (oldAnswerIndex >= 0)\r\n                state.summaryAnswers[oldAnswerIndex].comment = answer;\r\n            else\r\n                state.summaryAnswers.push({ id: state.progress, comment: answer });\r\n\r\n            localStorage.setItem('summaryAnswers', JSON.stringify(state.summaryAnswers));\r\n\r\n            /**\r\n             * Increases progress as long as there is not given answer in progress index.\r\n             * This way we get always to the latest not-yet-given answer after editing an old comment.\r\n             * Or to end of the Summary if all answers are already given\r\n             */\r\n            while (state.summaryAnswers[state.progress])\r\n                state.progress++;\r\n\r\n            state.answerComment = '';\r\n        }\r\n\r\n        const editAnswer = (index) => {\r\n            state.progress = index;\r\n            state.answerComment = state.summaryAnswers[index].comment;\r\n        }\r\n\r\n        const finishPhase = () => {\r\n            emit('phasecomplete');\r\n        }\r\n\r\n        return { state, saveAnswer, editAnswer, finishPhase };\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n\r\n<\/script>\r\n",pn="\x3c!-- Add \"scoped\" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\n    /* Card CSS starts */\r\n    #answers {\r\n\r\n    }\r\n    #descBottom, #descLeft, #descRight {\r\n        font-size: 16px;\r\n    }\r\n\r\n    #triangleImage {\r\n        position: relative;\r\n        background-image: url('../assets/card.png');\r\n        background-size: cover;\r\n        margin: 0px;\r\n        padding: 0px;\r\n        left: 0px;\r\n        width: 210px;\r\n        height: 182px;\r\n        display: inline-block;\r\n        cursor: default;\r\n        user-select: none;\r\n        transform: scale(0.7);\r\n    }\r\n\r\n    @font-face {\r\n        font-family: 'montserrat';\r\n        src: url('../assets/fonts/Montserrat-Light.ttf') format('truetype');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n    }\r\n\r\n    #descBottom {\r\n        position: relative;\r\n        font-family: \"montserrat\";\r\n        top: 143px;\r\n    }\r\n\r\n    #descLeft {\r\n        position: relative;\r\n        transform: rotate(120deg);\r\n        top: 70px;\r\n        left: -40px;\r\n    }\r\n\r\n    #descRight {\r\n        position: relative;\r\n        transform: rotate(240deg);\r\n        top: 45px;\r\n        left: 39px;\r\n    }\r\n\r\n    /* Card CSS ends */\r\n\r\n    .wrapper {\r\n        display: flex;\r\n        height: 90vh;\r\n    }\r\n\r\n    .split {\r\n        width: 50%;\r\n        height: 91.3vh;\r\n        justify-content: center;\r\n        margin: auto 0;\r\n        overflow-y: scroll;\r\n    }\r\n\r\n    .split:nth-child(1) {\r\n        background-color: var(--left);\r\n    }\r\n\r\n    .split:nth-child(2) {\r\n        background-image: url('../assets/tausta_blue.jpg');\r\n        background-size: cover;\r\n        background-repeat: no-repeat;\r\n    }\r\n    .split.split:nth-child(2) .content {\r\n        margin-top: 170px;\r\n    }\r\n    .hidden {\r\n        display: none;\r\n    }\r\n\r\n    #answers {\r\n        width: 70%;\r\n        margin: 20px auto;\r\n        text-align: left;\r\n    }\r\n\r\n    #answers h3 {\r\n        margin-bottom: 5px;\r\n        margin-top: 5px;\r\n        width: 90%;\r\n        display: inline-block;\r\n    }\r\n\r\n    .cardDiv {\r\n        width: 100%;\r\n    }\r\n\r\n    img:hover {\r\n        transform: scale(1.1);\r\n        cursor: pointer;\r\n    }\r\n\r\n    .choice{\r\n        width: 80%;\r\n        height: 80%;\r\n    }\r\n    .choice > img{\r\n        width: 80%;\r\n    }\r\n    .card {\r\n        width: 100%;\r\n    }\r\n    p {\r\n        margin:0;\r\n    }\r\n    #secondCardRow {\r\n        display: flex;\r\n        width: 460px;\r\n    }\r\n    #tips{\r\n        text-align:left;\r\n        float:right;\r\n        margin-top: 5em;\r\n    }\r\n\r\n    #decks{\r\n        display: inline-flex;\r\n    }\r\n    #ChoiceButtons{\r\n        margin-top: 15em;\r\n    }\r\n\r\n    #trigendaBoard{\r\n        background-image: url('../assets/Alusta_tumma.png');\r\n        background-size: cover;\r\n        background-repeat: no-repeat;\r\n        position: relative;\r\n        width: 459px;\r\n        height: 400px;\r\n        margin: 30px auto;\r\n        top: 15%;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    .triangle2 {\r\n        background-color: white;\r\n    }\r\n\r\n    .trigendaBoard {\r\n        position: relative;\r\n    }\r\n\r\n    #triangleImage:nth-child(1) {\r\n        margin: 0 auto;\r\n        bottom: 5px;\r\n    }\r\n\r\n    #secondCardRow .cardDiv:nth-child(1) {\r\n        position: relative;\r\n        top: 10px;\r\n        left: 2px;\r\n    }\r\n\r\n    .cardDiv:nth-child(2) {\r\n        position: relative;\r\n        transform: rotate(180deg);\r\n        right: 84px;\r\n        bottom: 15px;\r\n    }\r\n\r\n    .cardDiv:nth-child(2) #descBottom {\r\n        transform: rotate(180deg);\r\n    }\r\n\r\n    .cardDiv:nth-child(3) {\r\n        position: relative;\r\n        right: 173px;\r\n        top: 10px;\r\n    }\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        .wrapper {\r\n            flex-direction: column;\r\n        }\r\n\r\n        .split {\r\n            width: 100%;\r\n        }\r\n\r\n        .temporary {\r\n            display: none;\r\n        }\r\n\r\n        #trigendaBoard {\r\n            top: 0;\r\n        }\r\n    }\r\n</style>\r\n",un='<template>\r\n    <div class="container">\r\n        <h2 class="unselectable">Kiitos, kun kävit Trigenda -keskustelun!</h2>\r\n        <button id="saveButton" @click="savePDF">\r\n            <div id="buttonContent">\r\n                <span id="buttonText">Tallenna keskustelu</span>\r\n                <div id="buttonImage"></div>\r\n            </div>\r\n        </button>\r\n    </div>\r\n</template>\r\n',mn="<script>\r\nimport { jsPDF } from \"jspdf\";\r\nexport default {\r\n    name: 'SavePDF',\r\n    setup() {\r\n\r\n        const savePDF = () => {\r\n            const cardArray = JSON.parse(localStorage.getItem('cardArray'));\r\n            // Const feedbackCards = JSON.parse(localStorage.getItem('feedbackCards'));\r\n            const deckInfo = JSON.parse(localStorage.getItem('deckInfo'));\r\n            const summaryAnswers = JSON.parse(localStorage.getItem('summaryAnswers'));\r\n\r\n            const chosenPhaseTwoCards = [];\r\n\r\n            const goalCardP2 = cardArray.find(card => card.phase2selection === 'Tavoite');\r\n            const challengeCardP2 = cardArray.find(card => card.phase2selection === 'Haaste');\r\n            const assetOneCardP2 = cardArray.find(card => card.phase2selection === 'Voimavara1');\r\n            const assetTwoCardP2 = cardArray.find(card => card.phase2selection === 'Voimavara2');\r\n\r\n            chosenPhaseTwoCards.push(goalCardP2, challengeCardP2, assetOneCardP2, assetTwoCardP2);\r\n\r\n            const selectedDeckType = deckInfo.type;\r\n            const selectedDeckName = deckInfo.name;\r\n\r\n            const summaryAnswer1 = summaryAnswers[0].comment;\r\n            const summaryAnswer2 = summaryAnswers[1].comment;\r\n            const summaryAnswer3 = summaryAnswers[2].comment;\r\n            const summaryAnswer4 = summaryAnswers[3].comment;\r\n\r\n            let today = new Date();\r\n            const dd = String(today.getDate()).padStart(2, '0');\r\n            const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n            const yyyy = today.getFullYear();\r\n\r\n            today = dd + '.' + mm + '.' + yyyy;\r\n\r\n            // Default export is a4 paper, portrait, using millimeters for units\r\n            const doc = new jsPDF({\r\n                orientation: 'p',\r\n                unit: 'px',\r\n                format: 'a4',\r\n                putOnlyUsedFonts: true\r\n            });\r\n\r\n            const docWidth = doc.internal.pageSize.getWidth();\r\n            const docHeight = doc.internal.pageSize.getHeight();\r\n\r\n            doc.line(20, 80, docWidth - 20, 80);\r\n            doc.line(20, 105, docWidth - 20, 105);\r\n            doc.line(20, 130, docWidth / 2 - 5, 130);\r\n            doc.line(docWidth / 2 + 5, 130, docWidth - 20, 130);\r\n            doc.line(20, 155, docWidth / 2 - 5, 155);\r\n            doc.line(docWidth / 2 + 5, 155, docWidth - 20, 155);\r\n            doc.line(20, 180, docWidth - 20, 180);\r\n\r\n            doc.rect(5, 5, docWidth - 10, docHeight - 10);\r\n\r\n            doc.rect(20, 200, docWidth - 40, 90);\r\n            doc.rect(20, 200, docWidth - 40, 12);\r\n\r\n            doc.rect(20, 305, docWidth - 40, 90);\r\n            doc.rect(20, 305, docWidth - 40, 12);\r\n\r\n            doc.rect(20, 410, docWidth - 40, 90);\r\n            doc.rect(20, 410, docWidth - 40, 12);\r\n\r\n            doc.rect(20, 515, docWidth - 40, 90);\r\n            doc.rect(20, 515, docWidth - 40, 12);\r\n\r\n            doc.text(`Päiväys: ${today}`, 20, 75);\r\n            doc.text(`Valittu pakka: ${selectedDeckName} / ${selectedDeckType}`, 20, 100);\r\n            doc.text(`Tavoite: ${goalCardP2.description}`, 20, 125);\r\n            doc.text(`Haaste: ${challengeCardP2.description}`, 230, 125);\r\n            doc.text(`Voimavara 1: ${assetOneCardP2.description}`, 20, 150);\r\n            doc.text(`Voimavara 2: ${assetTwoCardP2.description}`, 230, 150);\r\n            doc.text(`Aihe valikoitui seuraavasta pinosta: ${goalCardP2.phase1selection}`, 20, 175);\r\n            doc.setFontSize(12.5);\r\n            doc.text(`Keskustelun pääsisällöt, mistä asioista keskusteltiin:`, 25, 210);\r\n            doc.text(`Keskustelussa nousseet tavoitteet ja keinot niiden saavuttamiseksi:`, 25, 315);\r\n            doc.text(`Keskustelun oivallukset:`, 25, 420);\r\n            doc.text(`Vapaa sana:`, 25, 525);\r\n            doc.setFontSize(10);\r\n            doc.text(summaryAnswer1, 25, 222.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n            doc.text(summaryAnswer2, 25, 327.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n            doc.text(summaryAnswer3, 25, 432.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n            doc.text(summaryAnswer4, 25, 537.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n\r\n            /**\r\n             *Function getBase64Image(src, callback) {\r\n             *   const img = new Image();\r\n             *   img.crossOrigin = 'Anonymous';\r\n             *   img.addEventListener('load', function() {\r\n             *       const canvas = document.createElement('canvas');\r\n             *       const ctx = canvas.getContext('2d');\r\n             *       let dataURL;\r\n             *       canvas.height = img.naturalHeight;\r\n             *       canvas.width = img.naturalWidth;\r\n             *       ctx.drawImage(img, 0, 0);\r\n             *       dataURL = canvas.toDataURL('png');\r\n             *       callback(dataURL);\r\n             *   }, false);\r\n             *   img.src = src;\r\n             *}\r\n             *getBase64Image('http://localhost:8080/img/DigiLogo.ae6d527d.png', (response) => {\r\n             *   // Logo size: 215 x 75 pixels\r\n             *   doc.addImage(response, 'png', 163, 10);\r\n             *   doc.save(\"Trigenda_yhteenveto.pdf\");\r\n             *})\r\n             */\r\n            doc.save(\"Trigenda_yhteenveto.pdf\");\r\n        }\r\n\r\n        return { savePDF };\r\n    }\r\n}\r\n<\/script>\r\n",hn='\x3c!-- Add "scoped" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\n\r\n#saveButton {\r\n    padding: 5px 30px;\r\n}\r\n\r\n#buttonContent {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n#buttonText {\r\n    margin: 0 10px 0 0;\r\n}\r\n\r\n#buttonImage {\r\n    background: url("../assets/PdfLogo.png") no-repeat;\r\n    background-size: 30px 30px;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.unselectable {\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}\r\n\r\n</style>\r\n',vn='<template>\r\n    <div class="container">\r\n     <nav>\r\n      <router-link to="/trigendainfo">YLEISTÄ</router-link>\r\n      <router-link to="/conversation">DEMOKESKUSTELU</router-link>\r\n      <a\r\n        href="https://docs.google.com/forms/d/e/1FAIpQLSd6f_TYtuLMLXUoUwj84LPRga-Lyo5XPyMBKfyZ_ozCIIZIuw/viewform?usp=sf_link"\r\n        >ARVOSTELE</a\r\n      >\r\n      <router-link to="/login">OMA SIVU</router-link>\r\n    </nav>\r\n    <img id="logo" src="..\\assets\\Trigendadigi.png" alt="logo">\r\n        <div id="login">\r\n            <label for="username">Username: </label>\r\n            <input type="text" name="username" id="username" v-model="username"><br>\r\n            <label for="password">Password: </label>\r\n            <input type="password" name="password" id="password" v-model="password"><br>\r\n            <button id="loginButton" @click="login">Kirjaudu</button>\r\n        </div>\r\n    <footer>\r\n      <p>TRIGENDADIGI</p>\r\n      <p>demo 1</p>\r\n      <p>OTA YHTEYTTÄ</p>\r\n      <p>email: info@trigenda.fi</p>\r\n    </footer>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport userService from \'../services/user.js\';\r\nimport { ref } from \'vue\';\r\n\r\nexport default {\r\n    name: \'Login\',\r\n    props: {\r\n\r\n    },\r\n    setup() {\r\n        const username = ref(\'\');\r\n        const password = ref(\'\');\r\n\r\n        const login = async () => {\r\n            const credentials = { username: username.value, password: password.value };\r\n            const response = await userService.processCredentials(credentials, \'login\');\r\n\r\n            if (response.token) {\r\n                console.log(response.token);\r\n                document.cookie=`token=${response.token}`;\r\n            }\r\n            else\r\n                console.log(\'Ei tokenia\');\r\n        }\r\n\r\n        return { username, password, login };\r\n    }\r\n\r\n}\r\n<\/script>\r\n\r\n\x3c!-- Add "scoped" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\nhtml, body {\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n\r\nh2 {\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  font-size: 20px;\r\n}\r\n\r\nnav {\r\n  display: flex;\r\n  background-color: #444444;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  max-height: 25%;\r\n  overflow: hidden;\r\n  z-index: 1;\r\n  justify-content: center;\r\n}\r\nnav > a:hover {\r\n  color: #48a3a7;\r\n}\r\nnav > a {\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 1em 3em;\r\n  margin: 0 0.1em;\r\n  width: 10em;\r\n  font-size: 0.9em;\r\n}\r\n#logo{\r\n    margin-top:3em;\r\n   width: 25vw;\r\n   -webkit-filter: drop-shadow(10px 10px 15px rgba(0, 0, 0, 0.1));\r\n  filter: drop-shadow(10px 10px 15px rgba(0, 0, 0, 0.1));\r\n}\r\n#login{\r\n    margin-top:3em;\r\n    margin-bottom:3.65em;\r\n}\r\nlabel{\r\n    display:block;\r\n}\r\nfooter {\r\n  background-color: #444444;\r\n  width: 100%;\r\n  color: white;\r\n  margin-top: 3em;\r\n  padding-top: 2em;\r\n  padding-bottom: 2em;\r\n  text-align: left;\r\n}\r\nfooter > p {\r\n  margin-left: 12vw;\r\n}\r\nbody {\r\n  min-height: 100%;\r\n  height: 100%;\r\n  font-family: \'Bahnschrift\', Times, serif;\r\n  background: linear-gradient(\r\n    180deg,\r\n    rgba(255, 255, 255, 1) 46%,\r\n    rgba(174, 174, 174, 1) 100%\r\n  );\r\n  width: 100%;\r\n}\r\n</style>\r\n',gn="<script>\r\nimport userService from '../services/user.js';\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n    name: 'Login',\r\n    props: {\r\n\r\n    },\r\n    setup() {\r\n        const username = ref('');\r\n        const password = ref('');\r\n\r\n        const login = async () => {\r\n            const credentials = { username: username.value, password: password.value };\r\n            const response = await userService.processCredentials(credentials, 'login');\r\n\r\n            if (response.token) {\r\n                console.log(response.token);\r\n                document.cookie=`token=${response.token}`;\r\n            }\r\n            else\r\n                console.log('Ei tokenia');\r\n        }\r\n\r\n        return { username, password, login };\r\n    }\r\n\r\n}\r\n<\/script>\r\n",yn="\x3c!-- Add \"scoped\" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\nhtml, body {\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n\r\nh2 {\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  font-size: 20px;\r\n}\r\n\r\nnav {\r\n  display: flex;\r\n  background-color: #444444;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  max-height: 25%;\r\n  overflow: hidden;\r\n  z-index: 1;\r\n  justify-content: center;\r\n}\r\nnav > a:hover {\r\n  color: #48a3a7;\r\n}\r\nnav > a {\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 1em 3em;\r\n  margin: 0 0.1em;\r\n  width: 10em;\r\n  font-size: 0.9em;\r\n}\r\n#logo{\r\n    margin-top:3em;\r\n   width: 25vw;\r\n   -webkit-filter: drop-shadow(10px 10px 15px rgba(0, 0, 0, 0.1));\r\n  filter: drop-shadow(10px 10px 15px rgba(0, 0, 0, 0.1));\r\n}\r\n#login{\r\n    margin-top:3em;\r\n    margin-bottom:3.65em;\r\n}\r\nlabel{\r\n    display:block;\r\n}\r\nfooter {\r\n  background-color: #444444;\r\n  width: 100%;\r\n  color: white;\r\n  margin-top: 3em;\r\n  padding-top: 2em;\r\n  padding-bottom: 2em;\r\n  text-align: left;\r\n}\r\nfooter > p {\r\n  margin-left: 12vw;\r\n}\r\nbody {\r\n  min-height: 100%;\r\n  height: 100%;\r\n  font-family: 'Bahnschrift', Times, serif;\r\n  background: linear-gradient(\r\n    180deg,\r\n    rgba(255, 255, 255, 1) 46%,\r\n    rgba(174, 174, 174, 1) 100%\r\n  );\r\n  width: 100%;\r\n}\r\n</style>\r\n",kn="const sql = require('../dbconnection');\r\n\r\nconst Dbmethods = {\r\n    findUserByUsername: (username, callback) => {\r\n        sql.query(`SELECT * FROM user WHERE username = ?`,\r\n                    [username],\r\n                    callback);\r\n    }\r\n}\r\n\r\nmodule.exports = Dbmethods;",fn="const Dbmethods = require('../services/dbmethods');\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst sql = require('../dbconnection');\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\n\r\nrouter.post('/register', async (req, res) => {\r\n    const body = req.body;\r\n\r\n    console.log(body);\r\n\r\n    const passwordHash = await bcrypt.hash(body.password, 10);\r\n\r\n    console.log(passwordHash);\r\n\r\n    sql.query(`INSERT INTO user (username, passwordhash, type, firstname, lastname, email, organization)\r\n                    VALUES (?, ?, 'admin', ?, ?, ?, ?);`,\r\n                    [body.username, passwordHash, body.firstname, body.lastname, body.email, body.organization],\r\n                    (err, result) => {\r\n                        console.log(err);\r\n                        console.log(result);\r\n                        res.send(result);\r\n    });\r\n});\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const body = req.body;\r\n    console.log(body);\r\n\r\n    await Dbmethods.findUserByUsername(body.username, async (err, result) => {\r\n        const user = result[0];\r\n\r\n        try {\r\n            const passwordCorrect = await bcrypt.compare(body.password, user.passwordhash);\r\n\r\n            if (!passwordCorrect) {\r\n                res.send('Virhe, tarkista käyttäjänimi ja salasana!');\r\n            } else {\r\n                const token = generateAccessToken({ username: user.username, type: user.type });\r\n                console.log('token:', token);\r\n                res.send({ token: token });\r\n            }\r\n\r\n            console.log('USERNAME:', user.username, 'PASSWORDCORRECT:', passwordCorrect);\r\n        }\r\n        catch(error) {\r\n            res.send('Virhe, tarkista käyttäjänimi ja salasana!');\r\n        }\r\n    });\r\n});\r\n\r\n// GET home page.\r\nrouter.get('/', (req, res) => {\r\n    res.send(\"Landing . . .\");\r\n});\r\n\r\nconst generateAccessToken = (payload) => {\r\n    console.log(payload);\r\n    return jwt.sign(payload, process.env.TOKEN_SECRET, { expiresIn: 60 * 60 * 24 });\r\n  }\r\n\r\nmodule.exports = router;",bn="import axios from 'axios';\r\n\r\nconst baseUrl = 'http://localhost:3000/api';\r\n\r\nconst processCredentials = async (credentials, method) => {\r\n    console.log(credentials);\r\n    const response = await axios.post(`${baseUrl}/${method}`, credentials);\r\n    return response.data;\r\n};\r\n\r\nexport default { processCredentials };\r\n\r\n",jn={name:"Code",setup:function(){U.a.highlightAll();var n=Object(t["s"])({visibleContent:0,matterjs:null,phase1backup1:null,phase1demo2:null,overlaydemo2:null,summarydemo2:null,savepdfdemo2:null,logindemo2:null,dbmethodsdemo2:null,backendrouterdemo2:null,userservicedemo2:null}),e=function(n,e,r){var t=U.a.highlight(n,U.a.languages.html,"html"),a=U.a.highlight(e,U.a.languages.javascript,"javascript"),i=U.a.highlight(r,U.a.languages.css,"css");return t+a+i};n.matterjs=e(G,q,Y),n.phase1backup1=e($,X,Z),n.phase1demo2=e(Q,nn,en),n.phase2demo2=e(rn,tn,an),n.overlaydemo2=e(sn,on,ln),n.summarydemo2=e(cn,dn,pn),n.savepdfdemo2=e(un,mn,hn),n.logindemo2=e(vn,gn,yn),n.dbmethodsdemo2=U.a.highlight(kn,U.a.languages.javascript,"javascript"),n.backendrouterdemo2=U.a.highlight(fn,U.a.languages.javascript,"javascript"),n.userservicedemo2=U.a.highlight(bn,U.a.languages.javascript,"javascript");var r=function(e){n.visibleContent=e};return{state:n,toggleVisibility:r}}};r("90b7");jn.render=K,jn.__scopeId="data-v-715e971a";var wn=jn,xn=Object(t["C"])("data-v-76e36ce9");Object(t["r"])("data-v-76e36ce9");var On={id:"container"},Cn={id:"flex"},Sn={key:0,class:"content"},Tn=Object(t["f"])("p",null,"Pelin menu musiikki lähti rakentumaan hyvin. Ensimmäisen version jälkeen soundeissa on vielä hakemista ja sävellystä tarvitaan lisää.",-1),An=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535530027?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Menu_V1.mp4"},null,-1),In=Object(t["f"])("p",null,"Nyt pääinstrumentti soi korkeammalta ja se oli selvästi oikea ratkaisu. Myös uutta sävellystä on lisätty mukaan.",-1),Mn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535530144?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Menu_V2.mp4"},null,-1),Pn=Object(t["f"])("p",null,'Menu musiikin lopullinen masteroitu versio kuulostaa massiivisemmalta ja enemmän "in-your-face" tyyliseltä.',-1),Bn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535530247?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Menu2_Final.mp4"},null,-1),Vn={key:1,class:"content"},Dn=Object(t["f"])("p",null,"Pelin toimistoon oli tarkoitus hakea synkkää, ahdistavaa dark-jazz tyylistä musiikkia. Soundit ovat vielä aika raakoja, volumetasoissa ja kaiuissa on hiomista.",-1),En=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535530365?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Office_V1.mp4"},null,-1),Hn=Object(t["f"])("p",null,"Lisätty mukaan syntikkasoundia ja hiottu soundeja. Sävellystä pitää vielä muuttaa pelin Product Ownerin toiveesta.",-1),_n=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535530479?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Office_V2.mp4"},null,-1),Ln=Object(t["f"])("p",null,"Sävellystä muutettu ja haettu synkempää ja ahdistavampaa fiilistä pelin luonteen mukaisesti. Sävellys on myös masteroitu viimeisen silauksen saamiseksi koko kappaleen soundiin.",-1),Fn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535530584?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Office2_Final.mp4"},null,-1),Nn={key:2,class:"content"},Rn=Object(t["f"])("p",null,"Itse pelin aikana soivassa In-Game taustamusiikissa on haettu nimenomaan taustalle soveltuvaa äänimaailmaa, joka voi huoletta loopata pelin edetessä ilman, että pelaaja kiinnittää siihen jatkuvaa huomiota.",-1),zn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535529848?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"InGame_V1.mp4"},null,-1),Wn=Object(t["f"])("p",null,"Masteroitu In-Game musiikki antaa viimeisen säväyksen taustamusiikille.",-1),Kn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535529945?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"InGame2_Final.mp4"},null,-1),Jn={key:3,class:"content"},Un=Object(t["f"])("p",null,'Combat musiikki kuuluu pelissä taistelun aikana. Ensimmäinen versio kuulostaa vielä hieman "ohuelta" ja volumetasoja pitää säätää.',-1),Gn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535529652?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Combat_V1.mp4"},null,-1),qn=Object(t["f"])("p",null,'Sopivien muokkausten ja masteroinnin jälkeen Combat musiikissa on enemmän "voimaa" ja "In-your-face" tyyliä.',-1),Yn=Object(t["f"])("iframe",{src:"https://player.vimeo.com/video/535529744?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Combat2_Final.mp4"},null,-1);Object(t["p"])();var $n=xn((function(n,e,r,a,i,s){return Object(t["o"])(),Object(t["c"])("div",On,[Object(t["f"])("div",Cn,[Object(t["f"])("h2",{class:["subMenu",{chosen:0===a.state.visibleContent}],onClick:e[1]||(e[1]=function(n){return a.toggleVisibility(0)})},"MENU",2),Object(t["f"])("h2",{class:["subMenu",{chosen:1===a.state.visibleContent}],onClick:e[2]||(e[2]=function(n){return a.toggleVisibility(1)})},"OFFICE",2),Object(t["f"])("h2",{class:["subMenu",{chosen:2===a.state.visibleContent}],onClick:e[3]||(e[3]=function(n){return a.toggleVisibility(2)})},"IN-GAME",2),Object(t["f"])("h2",{class:["subMenu",{chosen:3===a.state.visibleContent}],onClick:e[4]||(e[4]=function(n){return a.toggleVisibility(3)})},"COMBAT",2)]),0===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",Sn,[Tn,An,In,Mn,Pn,Bn])):Object(t["d"])("",!0),1===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",Vn,[Dn,En,Hn,_n,Ln,Fn])):Object(t["d"])("",!0),2===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",Nn,[Rn,zn,Wn,Kn])):Object(t["d"])("",!0),3===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",Jn,[Un,Gn,qn,Yn])):Object(t["d"])("",!0)])})),Xn={name:"Music",setup:function(){var n=Object(t["s"])({visibleContent:0}),e=function(e){n.visibleContent=e};return{state:n,toggleVisibility:e}}};r("cf8c");Xn.render=$n,Xn.__scopeId="data-v-76e36ce9";var Zn=Xn,Qn=Object(t["C"])("data-v-6b99e410");Object(t["r"])("data-v-6b99e410");var ne={id:"container"},ee={id:"flex"},re={key:0,class:"content"},te=Object(t["f"])("h3",null,"TrigendaDigi web-sovellus",-1),ae=Object(t["f"])("p",null,"Projektissa loimme web-sovelluksen Trigenda Oy nimiselle yritykselle. Trigenda Oy on Frostigon Oy:n asiakas ja Frostigon Oy toimi meidän toimeksiantajana. Trigenda on menetelmä, jota esimerkiksi Sote-alan ammattilaiset, terapeutit ja työnantajat voivat hyödyntää keskustelun käymisessä asiakkaan tai alaisen kanssa.",-1),ie=Object(t["f"])("p",null,'Projektin alkupuolella olimme projektiin liittyvistä asioista yhteydessä Frostigon Oy:n kanssa, mutta myöhemmässä vaiheessa keskustelimme Trigenda Oy:n henkilöiden kanssa suoraan sovelluksen toivotuista ominaisuuksista. Tässä projektissa oppi suoraan asiakastyön kanssakäymistä, mikä on hyödyllistä tulevaisuutta ajatellen. Aluksi henkilökohtaisesti oli haasteellista yrittää selittää joitain teknisiä asioita asiakasyrityksen henkilöille, koska he eivät ole tietotekniikan alalta. Myöhemmin opin, että asiat kannattaa tuoda esille ns. "maallikon termein", jotta molemminpuolinen ymmärrys on taattu. Saimme hyvin ohjeita Trigenda Oy:ltä tarvittaessa ja pidimme yhteyttä molemminpuolin, kun oli jotain asioita mihin tarvitsi lisätietoja tai muita haasteita.',-1),se={key:1,class:"content"},oe=Object(t["f"])("h3",null,"RoboHitman musiikit",-1),le=Object(t["f"])("p",null,"Sivutyönäni tuotin musiikkeja Ticorporate projektiin RoboHitman. Minulla on laajaa musiikkitaustaa jo ennestään, joten työ rullasi hyvin eteenpäin. Sävellystyössä DAW:ina toimi Cockos Reaper, soundit löytyivät Native Instruments Kontakt ja Omnispehere plugineista ja rumpusoundeja olen kerännyt ajan saatossa talteen koneelle. Niitä käytin Native Instrumentsin Battery 3 rumpukoneen kautta. Masterointivaihe hoitui iZotope Ozonen avulla ja kaikki mainitut pluginit on liitetty Reaperiin.",-1),ce=Object(t["f"])("p",null,"Projekti oli mielenkiintoinen, sillä pelimusiikit olivat hyvin vaihtelevia tyyliltään ja fiilikseltään ja pääsin harjoittamaan sävellys osaamistani erilaisissa tyylilajeissa. Keskustelin RoboHitmanin Product Ownerin kanssa musiikin tyyleistä ja sainkin linkkejä hyviin referenssi kappaleisiin joiden pohjalta osasin hakea oikeanlaista soundia.",-1),de=Object(t["f"])("p",null,"Pyysin PO:ta kuvailemaan kappaleita adjektiiveilla, millainen tunnelma ja millaisia fiiliksiä kappaleesta on tarkoitus välittyä. Mielestäni se on yksi parhaista keinoista saada ymmärrys siitä, millaista musiikkia asiakas toivoo. Product Owner oli tyytyväinen työni tuloksiin ja ainoastaan Office musiikin kohdalla sävellykseen piti tehdä hieman muutoksia hänen pyynnöstään, jotta fiilis saatiin oikeanlaiseksi. Muutosten jälkeen musiikki sopi hyvin pelin teemaan.",-1),pe={key:2,class:"content"},ue=Object(t["f"])("h3",null,"Scrum",-1),me=Object(t["f"])("p",null,"Toteutimme projektin aikana Scrum menetelmää. Scrumin kanssa oli jonkin verran totuttelemista, koska siinä on niin monta erilaista dokumentaatio asiaa, mutta hyvin pian alkoi päästä rytmiin viikkopalaverin, sprint planningin, sprint retrospectiven, sprint reviewin ja dailyjen kanssa. Dailyjen merkitys tässä tapauksessa ei ollut ehkä niin suuri, kuin tilanteessa jossa tiimin jäsenet hajautuvat tekemään enemmän hommia omiin oloihinsa. Meidän kohdalla Dailyt pysyivät lyhyinä, niinkuin kuuluukin ja olimme muutenkin lähestulkoon jatkuvasti mikrofonin päässä ja keskustelimme mitä tiimin jäsenet tekevät.",-1),he={key:3,class:"content"},ve=Object(t["f"])("h3",null,"ZenHub",-1),ge=Object(t["f"])("p",null,"Pidimme Product Backlogia ja Sprint Backlogia ZenHubissa. Tässä osa-alueessa oli eniten kehittämisen varaa, koska hyvin pitkälle backlog itemit olivat todella suuria ja monesti ne unohtui closata heti työn valmistuttua. Burndown charttiin tuli harvakseltaan isoja droppeja tästä johtuen. Usein itemit unohtui myös laittaa In Progress tilaan, kun työ aloitettiin. Myöskään selkeitä Definition of Done määritelmiä ei tehty. Otimme tässä asiassa suuren harppauksen Ticorporaten loppua kohden. Pilkoimme backlog itemit huomattavasti pienemmiksi ja lisäsimme niihin Definition of Done:t. Opettelimme myös ottamaan itemit In Progressiin ja closamaan ne heti, kun ne ovat valmiina.",-1),ye=Object(t["f"])("p",null,"En ollut aiemmin käyttänyt lainkaan ZenHubia. Se osoittautui käteväksi työkaluksi, tosin uskone, että fyysinen taulu muistilappujen kera olisi vielä parempi vaihtoehto, jos tehtäisiin töitä jossain paikan päällä. Story pointsien arviointi Product backlogiin osoittautui yllättävän haastavaksi. Oli todella vaikeaa arvioida, kuinka kauan aikaa jokin tietynlainen sovelluskehityksen osa tulee kestämään. Uskon, että tässä harjaantuu parhaiten ajan kanssa, mitä enemmän uusien projektien parissa toimii.",-1),ke={key:4,class:"content"},fe=Object(t["f"])("h3",null,"GitHub",-1),be=Object(t["f"])("p",null,"Ennen Ticorporate projektia en ollut työskennellyt tiimin kanssa ohjelmoinnin parissa tai käyttänyt GitHubia projektin yhteydessä. GitHub osoittautui todella hyödylliseksi tiimin kanssa koodatessa ja opin myös miten sovelluskehityksen tehtäviä voidaan kätevästi jakaa eri henkilöille ja työskennellä niiden parissa yhtäaikaisesti. Loimme projektin aikana useita eri Brancheja erilaisiin sovelluskehityksen osiin, tosin jossain vaiheessa käytimme myös samaa branchia eri osien muokkaamiseen. Tässä on vielä kehittämisen varaa, että homma pysyy järjestelmällisenä.",-1),je={key:5,class:"content"},we=Object(t["f"])("h3",null,"Aiempi osaaminen",-1),xe=Object(t["f"])("p",null,"Trigenda web-sovellus on toteutettu Vue.js frameworkia hyödyntäen. Minulla on aiempaa kokemusta Angularin ja Reactin parissa työskentelystä ja olikin hyvä, että pääsin täydentämään osaamisaluettani myös Vue.js:ään, koska sitä en ollut aiemmin käyttänyt. Koodin kirjoituksessa käytin Visual Studio Code:a ja GitHub:ia varten GitHub Bash:ia. Projektissa käytettiin myös MySQL tietokantaa, jonka käytöstä minulla on aiempaa kokemusta jonkin verran.",-1),Oe=Object(t["f"])("p",null,"Vue.js on idealtaan hyvin samankaltainen framework kuin Angular ja React, joten sen rakenteeseen oli suhteellisen nopea päästä käsiksi. Tietenkin Vue:n syntaksissa ja toimintamalleissa oli opettelemista ja niissä auttoi parhaiten Vue:n omat nettisivut sekä ystävämme Google.",-1),Ce={key:6,class:"content"},Se=Object(t["f"])("h3",null,"Oppiminen",-1),Te=Object(t["f"])("p",null,"Projektin myötä olen huomannut kuinka tärkeää koodin kommentointi ja koodin/sovelluksen rakenne on. Aluksi kommentointi jäi hieman toissijaiseksi. Ajattelin, että tuloksen aikaansaaminen on tärkeämpää, koska teimme kuitenkin asiakastyötä Trigenda Oy:lle. Hyvin pian kuitenkin huomasin, että esim. viikko-pari sitten itse kirjoitettu koodi ei olekaan niin selkeä lukuista ilman hyvää kommentointia. Saati sitten, kun joku muu kehittäjä lukee koodia. Projektin myöhemmässä vaiheessa saatuani jonkin tietyn sovelluksen osan koodattua, tein kommentoinnin asianmukaisesti.",-1),Ae=Object(t["f"])("p",null,'Myös sovelluksen rakenteen kanssa on oppinut projektin myötä tekemään fiksumpia ratkaisuja ja kun tehdään uusia osia sovellukseen, rakenteen miettimiseen panostaa nyt enemmän. Tällä säästytään tulevilta "umpikujilta" jatkuvasti kasvavassa sovelluksessa. Olen oppinut myös vielä enemmän ajattelemaan sovelluksen loogista toimintaa. Esim. minkä komponentin kuuluu tehdä mikäkin asia, tapahtuuko tietyt asiat Parent vai Child komponentissa eri tilanteissa jne.',-1),Ie=Object(t["f"])("p",null,"Opin luomaan Vue projektin alusta loppuun ja buildaamaan sen valmiiksi. Lisäksi sain sen lisättyä GitHub pages sivuille omasta repositoriostaan. Myös tämä portfolio on luotu käyttäen Vue.js:ää ja lisätty GitHub pagesiin omasta reposta. Opin käyttämään Vue:n Propseja ja Emitointia eli keskustelua Parent ja Child komponenttien välillä ja paljon muita Vue:n toimintoja kuten v-if, v-for, setup(), watchEffect() jne. Opin myös luomaan JSPDF-kirjastolla PDF-tiedoston.",-1);Object(t["p"])();var Me=Qn((function(n,e,r,a,i,s){return Object(t["o"])(),Object(t["c"])("div",ne,[Object(t["f"])("div",ee,[Object(t["f"])("h2",{class:["subMenu",{chosen:0===a.state.visibleContent}],onClick:e[1]||(e[1]=function(n){return a.toggleVisibility(0)})},"YHTEISTYÖ",2),Object(t["f"])("h2",{class:["subMenu",{chosen:1===a.state.visibleContent}],onClick:e[2]||(e[2]=function(n){return a.toggleVisibility(1)})},"SCRUM",2),Object(t["f"])("h2",{class:["subMenu",{chosen:2===a.state.visibleContent}],onClick:e[3]||(e[3]=function(n){return a.toggleVisibility(2)})},"OHJELMOINTI",2)]),0===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",re,[te,ae,ie])):Object(t["d"])("",!0),0===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",se,[oe,le,ce,de])):Object(t["d"])("",!0),1===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",pe,[ue,me])):Object(t["d"])("",!0),1===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",he,[ve,ge,ye])):Object(t["d"])("",!0),1===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",ke,[fe,be])):Object(t["d"])("",!0),2===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",je,[we,xe,Oe])):Object(t["d"])("",!0),2===a.state.visibleContent?(Object(t["o"])(),Object(t["c"])("div",Ce,[Se,Te,Ae,Ie])):Object(t["d"])("",!0)])})),Pe={name:"SelfEvaluation",setup:function(){var n=Object(t["s"])({visibleContent:0}),e=function(e){n.visibleContent=e};return{state:n,toggleVisibility:e}}};r("b63e");Pe.render=Me,Pe.__scopeId="data-v-6b99e410";var Be=Pe,Ve=[{path:"/",redirect:"/profile"},{path:"/portfolio",redirect:"/profile"},{path:"/profile",name:"Profile",component:x},{path:"/code",name:"Code",component:wn},{path:"/music",name:"Music",component:Zn},{path:"/selfevaluation",name:"SelfEvaluation",component:Be}],De=Object(h["a"])({history:Object(h["b"])(),routes:Ve}),Ee=De,He=r("9319"),_e=(r("098b"),r("e1ae"),r("4121"),r("bb57")),Le=Object(t["b"])(m);Le.use(Ee),Le.use(He["a"]),Le.component("Button",_e["a"]),Le.mount("#app")},"809d":function(n,e,r){},"90b7":function(n,e,r){"use strict";r("ae06")},ae06:function(n,e,r){},b0df:function(n,e,r){n.exports=r.p+"img/me.238120a6.jpg"},b63e:function(n,e,r){"use strict";r("52b5")},cd41:function(n,e,r){"use strict";r("3ebc")},cec0:function(n,e,r){"use strict";r("809d")},cf8c:function(n,e,r){"use strict";r("2f91")}});
//# sourceMappingURL=app.5338fc6c.js.map