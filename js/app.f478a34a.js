(function(e){function n(n){for(var a,i,o=n[0],l=n[1],c=n[2],u=0,p=[];u<o.length;u++)i=o[u],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&p.push(r[i][0]),r[i]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);d&&d(n);while(p.length)p.shift()();return s.push.apply(s,c||[]),t()}function t(){for(var e,n=0;n<s.length;n++){for(var t=s[n],a=!0,o=1;o<t.length;o++){var l=t[o];0!==r[l]&&(a=!1)}a&&(s.splice(n--,1),e=i(i.s=t[0]))}return e}var a={},r={app:0},s=[];function i(n){if(a[n])return a[n].exports;var t=a[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=e,i.c=a,i.d=function(e,n,t){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)i.d(t,a,function(n){return e[n]}.bind(null,a));return t},i.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="/portfolio/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],l=o.push.bind(o);o.push=n,o=o.slice();for(var c=0;c<o.length;c++)n(o[c]);var d=l;s.push([0,"chunk-vendors"]),t()})({0:function(e,n,t){e.exports=t("56d7")},"076f":function(e,n,t){"use strict";t("757c")},"10b8":function(e,n,t){},"28b4":function(e,n,t){},3233:function(e,n,t){"use strict";t("e845")},"47af":function(e,n,t){e.exports=t.p+"img/databaseV3.fbceac37.png"},"554c":function(e,n,t){e.exports=t.p+"img/databaseV1.a4a1f1d0.png"},5588:function(e,n,t){},"56d7":function(e,n,t){"use strict";t.r(n);t("e260"),t("e6cf"),t("cca6"),t("a79d");var a=t("7a23"),r={id:"container"},s=Object(a["f"])("h1",null,"Portfolio",-1),i=Object(a["f"])("h3",null,"by Sasu Salonen",-1);function o(e,n,t,o,l,c){var d=Object(a["v"])("NavBar"),u=Object(a["v"])("router-view");return Object(a["o"])(),Object(a["c"])("div",r,[s,i,Object(a["f"])(d),Object(a["f"])(u)])}var l=Object(a["C"])("data-v-2a54dbaa"),c=l((function(e,n,t,r,s,i){var o=Object(a["v"])("Button");return Object(a["o"])(),Object(a["c"])("nav",null,[Object(a["f"])(o,{label:"Profiili",class:"p-button-raised",onClick:n[1]||(n[1]=function(n){e.$router.push({path:"/profile"})})}),Object(a["f"])(o,{label:"Itsearviointi",class:"p-button-raised",onClick:n[2]||(n[2]=function(n){e.$router.push({path:"/selfevaluation"})})}),Object(a["f"])(o,{label:"Koodi",class:"p-button-raised",onClick:n[3]||(n[3]=function(n){e.$router.push({path:"/code"})})}),Object(a["f"])(o,{label:"Musiikki",class:"p-button-raised",onClick:n[4]||(n[4]=function(n){e.$router.push({path:"/music"})})})])})),d={name:"NavBar"};t("8cd8");d.render=c,d.__scopeId="data-v-2a54dbaa";var u=d,p={name:"App",components:{NavBar:u}};t("6ec7");p.render=o;var m=p,v=t("6c02"),h=t("b0df"),k=t.n(h),y=Object(a["C"])("data-v-782b360e");Object(a["r"])("data-v-782b360e");var f={id:"container"},g=Object(a["f"])("div",{id:"flex"},[Object(a["f"])("div",{id:"profileinfo"},[Object(a["f"])("h2",null,"Profiili"),Object(a["f"])("p",null,[Object(a["f"])("b",null,"Nimi:"),Object(a["e"])(" Sasu Salonen")]),Object(a["f"])("p",null,[Object(a["f"])("b",null,"Ikä:"),Object(a["e"])(" 32v")]),Object(a["f"])("p",null,[Object(a["f"])("b",null,"Opiskelupaikka:"),Object(a["e"])(" Jyväskylän ammattikorkeakoulu")]),Object(a["f"])("p",null,[Object(a["f"])("b",null,"Tutkinto-ohjelma:"),Object(a["e"])(" Tietojenkäsittelyn Tradenomi")]),Object(a["f"])("p",null,[Object(a["f"])("b",null,"Opiskelijatunnus:"),Object(a["e"])(" n4005")])]),Object(a["f"])("div",{id:"imageDiv"},[Object(a["f"])("img",{id:"meImage",src:k.a,width:"250"})])],-1),b=Object(a["f"])("div",{id:"infotext"},[Object(a["f"])("p",{class:"pInfotext"},"Opiskelen Jyväskylän Ammattikorkeakoulussa Tietojenkäsittelyn Tradenomi-linjalla. Suuntaudun opinnoissani web-sovelluskehitys puolelle."),Object(a["f"])("p",{class:"pInfotext"},"Osaamiseni on hyvä HTML, CSS, JavaScript, MySQL ja C# -ohjelmointikielissä. Lisäksi osaan kohtalaisesti PHP, Java ja Assembly -ohjelmointikieliä. Käyttämiäni sovelluskehitysympäristöjä ovat Angular, React, Vue.js, Visual Studio, Android Studio ja Unity. "),Object(a["f"])("p",{class:"pInfotext"},"Keväällä 2021 olen mukana Ticorporate projekteissa TrigendaDigi sekä RoboHitman. TrigendaDigi projektin tarkoituksena on luoda digitaalinen web-sovellus Trigendan jo olemassa olevasta fyysisestä tuotteesta. Työskentelen projektissa koodarina. Projekti toteutetaan Vue.js sovelluskehystä hyödyntäen. "),Object(a["f"])("p",{class:"pInfotext"},"Ticorporatessa sivutyöni on musiikin tuottaminen RoboHitman peliin. RoboHitman on Unityllä toteutettu sivultapäin kuvattu tasohyppely/räiskintäpeli. Minulla on ennestään laaja musiikillinen tausta. ")],-1);Object(a["p"])();var j=y((function(e,n,t,r,s,i){return Object(a["o"])(),Object(a["c"])("div",f,[g,b])})),T={name:"Profile"};t("7102");T.render=j,T.__scopeId="data-v-782b360e";var O=T,C=t("554c"),w=t.n(C),A=t("e7ea"),S=t.n(A),E=t("47af"),I=t.n(E),x=t("6e0f"),N=t.n(x),R=Object(a["C"])("data-v-33e05e84");Object(a["r"])("data-v-33e05e84");var P={id:"container"},L={class:"flex"},M={class:"flex secondMenu"},V={key:0,class:"content"},F=Object(a["f"])("p",{class:"contentText"},"Projektin alkuvaiheessa suunnittelimme sovellukseen fysiikkapohjaisia Trigenda-kortteja. Löysimme Matter.js kirjaston, jonka toimintaa testasin Vue.js ympäristössä.",-1),D=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538002236?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Matter.js testi"},null,-1),B={key:1,class:"content"},H=Object(a["f"])("p",{class:"contentText"},"Projektin alussa kehitetty versio keskustelun ensimmäisestä vaiheesta, jota kutsuimme nimellä Phase 1. Ensimmäisessä vaiheessa käyttäjä lajittelee valitun Trigenda korttisarjan jokaisen kortin haluamaansa kategoriaan. Kategoriat ovat Voimavara, Ongelma, Haaste ja Toive. Ulkoasu on vielä karu. Korttivalinnat tallentuvat selaimen LocalStorageen.",-1),_=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538531432?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 1 Old"},null,-1),U=Object(a["f"])("p",{class:"contentText"},"Viimeisimmässä Demossa ulkoasu on hioutunut paljon modernimmaksi ja LocalStorageen tallennettavat tiedot on jäsennelty olioihin paremmin.",-1),K=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538531641?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 1 and 2"},null,-1),J={key:2,class:"content"},G=Object(a["f"])("p",{class:"contentText"},[Object(a["e"])("Phase 2 vaiheessa valitaan keskusteluun kortteja pakoista, jotka muodostuvat Phase 1 valintojen perusteella. Keskusteluun valitaan Tavoite, Haaste ja kaksi Voimavaraa. Varhaisemmassa ohjelmistoversiossa pakan valinta ja korttivalinta tehdään Overlay komponentissa. Overlay komponentissa käyttäjä antaa myös tekstimuotoiset perustelut korttivalinnoista. Tiedot tallennetaan selaimen LocalStorageen. "),Object(a["f"])("br"),Object(a["f"])("br"),Object(a["e"])(" Vanhemmassa sovellusversiossa Overlay komponentissa on käytetty useita CardTypeSelection, CardSelection ja Answer komponentteja, jotka näytetään Overlayn progressin mukaan. Tämä on kuitenkin tarpeetonta koodin toistamista. ")],-1),Y=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538547230?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 2 Old Overlay"},null,-1),W=Object(a["f"])("p",{class:"contentText"},[Object(a["e"])("Uudemmassa versiossa pakka valitaan Phase 2 komponentissa ja ainoastaan korttivalinta ja vastausteksti tehdään Overlay komponentissa. Overlay:ssä on myös vähemmän koodia ja sen templaatissa Child komponentteja käytetään nyt järkevämmin uudelleen ylimääräisen koodin välttämiseksi. "),Object(a["f"])("br"),Object(a["f"])("br"),Object(a["e"])(" Uudemmassa sovellusversiossa Overlay komponentin templaatissa on vain yksi CardSelection ja Answer komponentti, joita hyödynnetään jokaisen kortin valintaan. CardTypeSelectionin toiminta on siirretty kokonaan Phase 2 komponenttiin.")],-1),q=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538531471?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Phase 2 New Overlay"},null,-1),z={key:3,class:"content"},$=Object(a["f"])("p",{class:"contentText"},"Summary komponentissa keskustelija kirjoittaa oman yhteenvetonsa keskustelusta. Kysymyksiä on muutama ja jokaiseen kysymykseen annetaan oma vastauksensa. Jo annettua vastausta pääsee myös halutessaan muokkaamaan. Annetut vastaustekstit tallentuvat selaimen LocalStorageen.",-1),Q=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538531522?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Summary"},null,-1),Z={key:4,class:"content"},X=Object(a["f"])("p",{class:"contentText"},"Keskustelun lopussa käyttäjä voi tallentaa keskustelun yhteenvedon PDF-tiedostoon. PDF-tiedoston sisältö luodaan LocalStorageen tallennetuista käyttäjän valinnoista. PDF-tiedoston luomiseen on käytetty JSPDF-kirjastoa.",-1),ee=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538531597?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Save PDF"},null,-1),ne={key:5,class:"content"},te=Object(a["f"])("p",{class:"contentText"},[Object(a["e"])("Käyttäjä voi kirjautua sovellukseen Login komponentissa. Backend palauttaa JWT-tokenin, mikäli käyttäjätunnus ja salasana ovat oikein. Backend tarkistaa käyttäjätunnuksen ja salasanan tietokannasta."),Object(a["f"])("br"),Object(a["f"])("br"),Object(a["e"])(" Kirjautuneen käyttäjän tunnus tallennetaan reaktiiviseen Vuex Storeen, joka ylläpitää sovelluksen tilanhallintaa. Kun käyttäjä kirjautuu ulos sovelluksesta, asetetaan Vuex Storen loggedUser arvoksi null. Navbar (navigointipalkki) komponentti näyttää Vuex Storen loggedUser:in arvon perusteella sisäänkirjautumislinkin tai kirjautuneen käyttäjän tunnuksen.")],-1),ae=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/538531354?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Login"},null,-1),re=Object(a["f"])("p",{class:"contentText"},"Vuex store on luotu omaan store.js tiedostoon. Vue projektissa se otetaan käyttöön main.js tiedostossa. Store:n state olioon on tallennettu reaktiiviset muuttujat. Mutations olioon on tallennettu funktiot, joilla voidaan muuttaa state olion muuttujien arvoja.",-1),se={key:6,class:"content"},ie=Object(a["f"])("p",{class:"contentText"},"User Servicessä on funktio Backendin kanssa keskustelua varten. processCredentials funktiota voidaan käyttää uuden käyttäjän rekisteröintiin tai jo olemassa olevan käyttäjän sisäänkirjaamiseen. Frontend lähettää kirjautumis- tai rekisteröintipyynnön Backendille Axios kirjaston avulla.",-1),oe={key:7,class:"content"},le=Object(a["f"])("p",{class:"contentText"},[Object(a["e"])("Routerista löytyy Backendin reitit. Siellä käsitellään Frontendistä tulleet uuden käyttäjän rekisteröintipyynnöt ja olemassa olevan käyttäjän kirjautumispyynnöt. Uuden käyttäjän tiedot tallennetaan tietokantaan. Salasana kryptataan bcrypt kirjaston avulla tietoturva syistä."),Object(a["f"])("br"),Object(a["f"])("br"),Object(a["e"])(" Jos käyttäjä syöttää oikean käyttäjätunnuksen ja salasanan sisäänkirjautuessaan, Backend lähettää Frontendille JWT-tokenin. Mikäli käyttäjätunnus tai salasana on väärä, Backend lähettää Frontendille virheilmoituksen.")],-1),ce={key:8,class:"content"},de=Object(a["f"])("p",{class:"contentText"},"Sovelluksessa käytetään MySQL-tietokantaa. Dbmethods pitää sisällään funktiot MySQL-queryjä varten. Funktioille annetaan myös tarvittavat parametrit.",-1),ue={key:9,class:"content"},pe=Object(a["f"])("p",{class:"contentText"},"TrigendaDigi sovellukseen luotiin MySQL-tietokanta. Tässä ensimmäinen versio tietokannan rakenteesta. Eri käyttäjätasot ovat omina tauluinaan, mikä ei ole paras mahdollinen ratkaisu.",-1),me=Object(a["f"])("img",{class:"sqlImage",src:w.a},null,-1),ve=Object(a["f"])("p",{class:"contentText"},"Tietokannan toisessa versiossa eri käyttäjätasojen tallentamiseen käytetään yhtä taulua (User). Keskustelun Phase 1, Phase 2 ja Feedback korttien tallentamiseen käytetään samaa taulua. Parempi ratkaisu olisi tehdä keskustelun eri vaiheiden korttien tallentamiseen omat taulut. License ja Deck taulujen yhdistäminen ei ole vielä valmis.",-1),he=Object(a["f"])("img",{class:"sqlImage",src:S.a},null,-1),ke=Object(a["f"])("p",{class:"contentText"},"Nyt keskustelun korttien Phase 1 ja Phase 2 valinnat tallennetaan eri tauluun kuin Feedback korttien valinnat. Käyttäjän osoitetiedoille on luotu oma taulu.",-1),ye=Object(a["f"])("img",{class:"sqlImage",src:I.a},null,-1),fe=Object(a["f"])("p",{class:"contentText"},"Deck taulu on nyt yhdistetty oikein License taulun kanssa. Keskustelun jokaisen vaiheen korttivalinnat tallennetaan omiin tauluihinsa. Card taulu on yhdistetty Deck tauluun ja keskustelun korttivalintojen tauluihin.",-1),ge=Object(a["f"])("img",{class:"sqlImage",src:N.a},null,-1),be=Object(a["f"])("p",{class:"contentText"},"Tietokannan viimeisimmän version MySQL koodi.",-1);Object(a["p"])();var je=R((function(e,n,t,r,s,i){return Object(a["o"])(),Object(a["c"])("div",P,[Object(a["f"])("div",L,[Object(a["f"])("h2",{class:["subMenu",{chosen:0===r.state.visibleContent}],onClick:n[1]||(n[1]=function(e){return r.toggleVisibility(0)})},"MATTER.JS",2),Object(a["f"])("h2",{class:["subMenu",{chosen:1===r.state.visibleContent}],onClick:n[2]||(n[2]=function(e){return r.toggleVisibility(1)})},"PHASE 1",2),Object(a["f"])("h2",{class:["subMenu",{chosen:2===r.state.visibleContent}],onClick:n[3]||(n[3]=function(e){return r.toggleVisibility(2)})},"PHASE 2",2),Object(a["f"])("h2",{class:["subMenu",{chosen:3===r.state.visibleContent}],onClick:n[4]||(n[4]=function(e){return r.toggleVisibility(3)})},"SUMMARY",2),Object(a["f"])("h2",{class:["subMenu",{chosen:4===r.state.visibleContent}],onClick:n[5]||(n[5]=function(e){return r.toggleVisibility(4)})},"SAVE PDF",2)]),Object(a["f"])("div",M,[Object(a["f"])("h2",{class:["subMenu",{chosen:5===r.state.visibleContent}],onClick:n[6]||(n[6]=function(e){return r.toggleVisibility(5)})},"LOGIN",2),Object(a["f"])("h2",{class:["subMenu",{chosen:6===r.state.visibleContent}],onClick:n[7]||(n[7]=function(e){return r.toggleVisibility(6)})},"USER SERVICE",2),Object(a["f"])("h2",{class:["subMenu",{chosen:7===r.state.visibleContent}],onClick:n[8]||(n[8]=function(e){return r.toggleVisibility(7)})},"ROUTER",2),Object(a["f"])("h2",{class:["subMenu",{chosen:8===r.state.visibleContent}],onClick:n[9]||(n[9]=function(e){return r.toggleVisibility(8)})},"DBMETHODS",2),Object(a["f"])("h2",{class:["subMenu",{chosen:9===r.state.visibleContent}],onClick:n[10]||(n[10]=function(e){return r.toggleVisibility(9)})},"MYSQL",2)]),0===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",V,[F,D,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.matterjs},null,8,["innerHTML"])])):Object(a["d"])("",!0),1===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",B,[H,_,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.phase1backup1},null,8,["innerHTML"]),U,K,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.phase1demo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),2===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",J,[G,Y,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.phase2old},null,8,["innerHTML"]),Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.overlayold},null,8,["innerHTML"]),W,q,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.phase2demo2},null,8,["innerHTML"]),Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.overlaydemo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),3===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",z,[$,Q,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.summarydemo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),4===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",Z,[X,ee,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.savepdfdemo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),5===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",ne,[te,ae,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.logindemo2},null,8,["innerHTML"]),re,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.store},null,8,["innerHTML"]),Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.main},null,8,["innerHTML"])])):Object(a["d"])("",!0),6===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",se,[ie,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.userservicedemo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),7===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",oe,[le,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.backendrouterdemo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),8===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",ce,[de,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.dbmethodsdemo2},null,8,["innerHTML"])])):Object(a["d"])("",!0),9===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",ue,[pe,me,ve,he,ke,ye,fe,ge,be,Object(a["f"])("p",{class:"preFormatted",innerHTML:r.state.sqlcode},null,8,["innerHTML"])])):Object(a["d"])("",!0)])})),Te=t("c197"),Oe=t.n(Te),Ce=(t("8009"),t("416b"),t("f393"),t("cf19"),t("826c"),t("6217"),t("8e9b"),t("867a"),t("a878"),'<template>\r\n  <div class="testi">\r\n    Test\r\n  </div>\r\n</template>\r\n'),we="<script>\r\nimport Matter from 'matter-js';\r\n\r\nlet engine = Matter.Engine.create();\r\nlet world = engine.world;\r\nlet box = Matter.Bodies.polygon(100, 100, 3, 40, {\r\n  render: {\r\n    fillStyle: 'red',\r\n    strokeStyle: 'blue',\r\n    lineWidth: 3,\r\n  },\r\n});\r\n\r\nbox.friction = 0.1;\r\nbox.frictionAir = 0.03;\r\nbox.frictionStatic = 0.5;\r\n\r\nlet box2 = Matter.Bodies.polygon(400, 100, 3, 40, {\r\n  restitution: 0.95,\r\n  render: {\r\n    fillStyle: '#000000',\r\n    text: {\r\n      fillStyle: '#FFFFFF',\r\n      content: 'Test',\r\n      size: 72,\r\n      family: 'Papyrus',\r\n    },\r\n  },\r\n});\r\n\r\nbox2.friction = 0.1;\r\nbox2.frictionAir = 0.03;\r\nbox2.frictionStatic = 0.5;\r\n\r\nconsole.log(box2);\r\n\r\nlet circle = Matter.Bodies.circle(600, 200, 60);\r\n\r\ncircle.render.sprite.texture =\r\n  'https://images-na.ssl-images-amazon.com/images/I/418aO%2BxDr%2BL._AC_.jpg';\r\ncircle.render.fillStyle = false;\r\ncircle.render.sprite.xScale = 0.4;\r\ncircle.render.sprite.yScale = 0.4;\r\ncircle.render.opacity = 1;\r\n\r\nlet wallTop = Matter.Bodies.rectangle(0, 0, 2000, 100, { isStatic: true });\r\nlet wallLeft = Matter.Bodies.rectangle(0, 0, 100, 2000, { isStatic: true });\r\nlet wallRight = Matter.Bodies.rectangle(800, 0, 100, 2000, { isStatic: true });\r\nlet wallBottom = Matter.Bodies.rectangle(0, 600, 2000, 100, { isStatic: true });\r\n\r\nlet render = Matter.Render.create({\r\n  element: document.body,\r\n  engine: engine,\r\n  options: {\r\n    wireframes: false,\r\n    background: 'rgb(255,255,255)',\r\n  },\r\n});\r\n\r\nworld.gravity.x = 0;\r\nworld.gravity.y = 0;\r\n\r\nMatter.World.add(world, [\r\n  box,\r\n  box2,\r\n  circle,\r\n  wallTop,\r\n  wallLeft,\r\n  wallRight,\r\n  wallBottom,\r\n]);\r\n\r\nlet mouse = Matter.Mouse.create(render.canvas),\r\n  mouseConstraint = Matter.MouseConstraint.create(engine, {\r\n    mouse: mouse,\r\n    constraint: {\r\n      stiffness: 0.2,\r\n      render: {\r\n        visible: false,\r\n      },\r\n    },\r\n  });\r\n\r\nMatter.World.add(world, mouseConstraint);\r\n\r\nMatter.Engine.run(engine);\r\nMatter.Render.run(render);\r\n\r\nexport default {\r\n  name: 'Testi',\r\n  props: {\r\n    msg: String,\r\n  },\r\n};\r\n<\/script>\r\n",Ae='<template>\r\n  <h1>Phase 1</h1>\r\n  <div class="TrigendaBoard">\r\n    <div id="top">\r\n        <img src="../assets/triangles/TurkoosiKolmio.png" class="triangleimg" id="voimavaraimg">\r\n        <input @click="saveSelection(\'Voimavara\')" type="button" class="trigendaButton" value="Voimavara" />\r\n    </div>\r\n    <div id="bottomLeft">\r\n        <img src="../assets/triangles/OranssiKolmio.png" class="triangleimg" id="ongelmaimg">\r\n        <input @click="saveSelection(\'Ongelma\')" type="button" class="trigendaButton" value="Ongelma" />\r\n    </div>\r\n    <div id="bottomCenter">\r\n        <img src="../assets/triangles/KeltanenKolmio.png" class="triangleimg" id="haasteimg">\r\n        <input @click="saveSelection(\'Haaste\')" type="button" class="trigendaButton" value="Haaste" />\r\n    </div>\r\n    <div id="bottomRight">\r\n        <img src="../assets/triangles/VihreeKolmio.png" class="triangleimg" id="toiveimg">\r\n        <input @click="saveSelection(\'Toive\')" type="button" class="trigendaButton" value="Toive" />\r\n    </div>\r\n  </div>\r\n  <div id="cardElement">\r\n    <Card :description="state.currentCard.description"/>\r\n    <input @click="saveSelection(\'EnOsaaSanoa\')" type="button" id="enosaasanoa" value="En osaa sanoa" />\r\n  </div>\r\n  <p>Kortteja nostettu {{state.cardsDrawn+1}}</p>\r\n</template>\r\n',Se='<script>\r\n\r\nimport Card from "./Card.vue"\r\nimport deck from "../deck.json"\r\nimport {reactive} from "vue"\r\n\r\nexport default {\r\n    name: "Phase1",\r\n    props: {\r\n        msg: String,\r\n    },\r\n    components: {\r\n        Card\r\n    },\r\n    setup(props, {emit}) {\r\n        localStorage.removeItem("cardArrayPhase1");\r\n\r\n        /**\r\n         * Constant state is made a reactive object, which means when you change it\'s\r\n         * properties, the changes show reactively in the template as well\r\n         *\r\n         * cardsDrawn tells how many cards have the user gone through\r\n         * currentCard tells the description of the currenlty shown card\r\n         */\r\n        const state = reactive({cardsDrawn: 0, currentCard: deck.cards[0]})\r\n\r\n        /**\r\n         * Function saveSelection saves the card index number in the deck.cards array\r\n         * and where the user placed the card in the browser\'s localStorage.\r\n         * This will be changed later to save the selection to a database.\r\n         *\r\n         * Each template card placing button calls saveSelection with different\r\n         * selection parameter which tells where the card was placed. \r\n         */\r\n        const saveSelection = (selection) => {\r\n\r\n            /**\r\n             * If there are still cards which haven\'t been saved, save the current\r\n             * card\'s selection, else emit "phasecomplete" to the parent component\r\n             * to get to the next phase\r\n             */\r\n            console.log(state.cardsDrawn, deck.cards.length);\r\n\r\n            const saveData = {card: state.currentCard, selection: selection};\r\n            let cardArray = [];\r\n\r\n            if (localStorage.getItem("cardArrayPhase1"))\r\n                cardArray = JSON.parse(localStorage.getItem("cardArrayPhase1"));\r\n\r\n            cardArray.push(saveData);\r\n            localStorage.setItem("cardArrayPhase1", JSON.stringify(cardArray));\r\n\r\n            if (state.cardsDrawn == deck.cards.length - 1) {\r\n                emit("phasecomplete");\r\n                return;\r\n            }\r\n\r\n            state.cardsDrawn++;\r\n\r\n            state.currentCard = deck.cards[state.cardsDrawn];\r\n\r\n            console.log(cardArray);\r\n\r\n        }\r\n\r\n        return {deck, state, saveSelection}\r\n    },\r\n    emits: [\'phasecomplete\'],\r\n};\r\n<\/script>\r\n',Ee='<template>\r\n    <div class="container wrapper" :class="[state.mouseClass, state.fadeClass, state.visibilityClass]">\r\n        <div class="split">\r\n            <Tip class="temporary" v-if="!state.backToStart && props.showInfo" :tipMsg="state.tipMsg[state.tipIndex]" :mood="state.tipMood" />\r\n            <div class="splitContainer">\r\n                <div class="card" v-if="!state.backToStart" :class="[state.cardFade]">\r\n                    <div id="cardElement">\r\n                        <Card :description="state.currentCard.description"/>\r\n                    </div>\r\n                    <p class="unselectable">Kortteja jäljellä: {{ decks[props.chosenDeck].cards.length - state.cardsDrawn }}</p>\r\n                </div>\r\n                <div class="content temporary">\r\n                    <div v-if="!state.backToStart" class="helpText">\r\n                    <p class ="unselectable"><span class="bold">Voimavarat </span>ovat asioita, joista koet saavasi voimaa ja jotka auttavat sinua elämän eri konteksteissa. </p>\r\n                    <p class ="unselectable"><span class="bold">Toiveilla </span>tarkoitetaan asioita ja ominaisuuksia, joita toivoisit saavuttavasi elämäsi aikana. Toiveet voivat olla myös asioita, joita sinulla jo elämässäsi on ja joiden toivoisit elämässäsi säilyvän. </p>\r\n                    <p class ="unselectable"><span class="bold">Haaste </span>on elämääsi ja/tai elämäsi eri osa-alueita jollakinlailla haastava asia/ominaisuus. Haasteet voidaan kokea ja nähdä myös jokseenkin positiivisina asioina, jotka esimerkiksi saavat sinut toimimaan tehokkaammin. </p>\r\n                    <p class ="unselectable"><span class="bold">Ongelmat </span>taas ovat jo selkeästi elämääsi ja elämäsi osa-alueita kuormittavia asioita/ominaisuuksia. Ongelmat ovat selkeästi asioita, joihin tulee saada selkeä ratkaisu nopeallakin aikataululla ja joiden ratkaisemisessa voidaan tarvita ulkopuolista apua (esim. ystävät, yhteisö, terveydenhuolto).</p>\r\n                    </div>\r\n                </div>\r\n                <div class="startOverMessage" v-if="state.backToStart">\r\n                    <p>Valitse kategorioihin <b>HAASTE</b>, <b>TOIVE</b> ja <b>ONGELMA</b> yhteensä vähintään 2 korttia\r\n                    ja kategoriaan <b>VOIMAVARA</b> vähintään 2 korttia, jotta saamme keskustelusta mahdollisimman\r\n                    kattavan.</p>\r\n                    <button class="btn" @click="startOver">Takaisin alkuun</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class="split">\r\n            <div v-if="!state.backToStart" class="content">\r\n                <img class="background-image" src="../assets/alusta.png" alt="Trigenda-triangle">\r\n                <div class="trigendaBoard-container buttons">\r\n                    <div id="trigendaBoard" :class="[state.triangleFade]">\r\n                        <div class="first">\r\n                            <div>\r\n                                <div\r\n                                    @mouseover="hover1 = true"\r\n                                    @mouseleave="hover1 = false"\r\n                                    class="triangle" @click="saveSelection(\'Voimavara\')">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                                @mouseover="hover2 = true"\r\n                                @mouseleave="hover2 = false"\r\n                                class="triangle" @click="saveSelection(\'Haaste\')">\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                                @mouseover="hover3 = true"\r\n                                @mouseleave="hover3 = false"\r\n                                class="triangle" @click="saveSelection(\'Toive\')">\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                                @mouseover="hover4 = true"\r\n                                @mouseleave="hover4 = false"\r\n                                class="triangle" @click="saveSelection(\'Ongelma\')">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class="trigendaBoard-container backgrounds">\r\n                    <div id="trigendaBoard" :class="[state.triangleFade]">\r\n                        <div class="first">\r\n                            <div>\r\n                                <div\r\n                                :class="{ highlight: hover1 }"\r\n                                class="triangle-background"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                            :class="{ highlight: hover2 }"\r\n                            class="triangle-background"></div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                            :class="{ highlight: hover3 }"\r\n                            class="triangle-background"></div>\r\n                        </div>\r\n                        <div>\r\n                            <div\r\n                            :class="{ highlight: hover4 }"\r\n                            class="triangle-background"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <button @click="saveSelection(\'EnOsaaSanoa\')" class="btn" id="next">En osaa sanoa</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n',Ie="<script>\r\nimport Card from \"./Card.vue\";\r\nimport decks from \"../decks.json\";\r\nimport Tip from '../components/Tip.vue';\r\nimport {reactive} from \"vue\";\r\n\r\nexport default {\r\n    name: 'Phase1',\r\n    components: {\r\n        Card,\r\n        Tip\r\n    },\r\n    data() {\r\n        return {\r\n            hover1: false,\r\n            hover2: false,\r\n            hover3: false,\r\n            hover4: false,\r\n        }\r\n    },\r\n    props: {\r\n        // Index of the chosen deck in decks.json\r\n        chosenDeck: Number,\r\n        showInfo: Boolean\r\n    },\r\n    setup(props, {emit}) {\r\n        localStorage.removeItem(\"cardArray\");\r\n        localStorage.removeItem(\"feedbackCards\");\r\n        localStorage.removeItem(\"summaryAnswers\");\r\n        localStorage.removeItem(\"deckInfo\");\r\n\r\n        /**\r\n         * Constant state is made a reactive object, which means when you change it's\r\n         * properties, the changes show reactively in the template as well.\r\n         *\r\n         * if backToStart is true, the message to choose at least total of 2 cards in\r\n         * Challenge, Wish and Problem cards and total of 2 cards in Asset cards is shown at\r\n         * the end of Phase 1.\r\n         *\r\n         * tipMsg and tipMood are passed as props to Tip component to show a message and set\r\n         * Tringo's mood. Mood can be 'happy', 'confused' or 'sad'.\r\n         * tipIndex tells which message will be passed to Tip component from tipMsg array.\r\n         */\r\n        const state = reactive({\r\n            // How many cards have the user gone through\r\n            cardsDrawn: 0,\r\n            // Card that is currently showing\r\n            currentCard: decks[props.chosenDeck].cards[0],\r\n            // Fade effect CSS class for Container div. ('fadeIn' or 'fadeOut')\r\n            fadeClass: null,\r\n            // Visibility CSS class for Container div. ('visible' or 'hidden')\r\n            visibilityClass: 'hidden',\r\n\r\n            /**\r\n             * Mouse CSS class for Container div,\r\n             * tells if mouse clicks are enabled or disabled. ('mouseEnabled' or 'mouseDisabled')\r\n             */\r\n            mouseClass: 'mouseDisabled',\r\n            backToStart: false,\r\n            tipMsg: [\r\n                ['Hienoa, olet siirtynyt keskustelun ensimmäiseen vaiheeseen.','Hiljaisen, intuitiivisen työskentelyn vaiheessa saat jäsentää omia ajatuksiasi valittuun teemaan liittyen yksittäisten käsitekorttien avulla. Tehtävänäsi on sijoittaa käsitekortti johonkin neljästä sektorista.'],\r\n                ['Pyrithän valitsemaan vähintään kaksi voimavaraa, yhden ongelman ja yhden haasteen.', 'Jos kortti ei mielestäsi sovellu mihinkään lokeroon, voit valita \"en osaa sanoa\".']\r\n            ],\r\n            tipIndex: 0,\r\n            tipMood: 'happy',\r\n        });\r\n\r\n        const fadeInElements = () => {\r\n            state.fadeClass = 'fadeIn'\r\n            state.visibilityClass = 'visible'\r\n            setTimeout(() => {\r\n                state.mouseClass = 'mouseEnabled';\r\n            }, 200);\r\n        }\r\n\r\n        const fadeOutElements = () => {\r\n            state.fadeClass = 'fadeOut'\r\n            state.mouseClass = 'mouseDisabled';\r\n            setTimeout(() => {\r\n                emit(\"phasecomplete\");\r\n            }, 200);\r\n        }\r\n        fadeInElements();\r\n\r\n        /**\r\n         * Function saveSelection saves the current card\r\n         * and where the user placed the card in the browser's localStorage.\r\n         * !! THIS WILL BE CHANGED LATER TO SAVE THE INFORMATION TO DATABASE !!\r\n         *\r\n         */\r\n        const saveSelection = (selection) => {\r\n            if (state.tipIndex < 1)\r\n                state.tipIndex++;\r\n\r\n            const saveData = {...state.currentCard, phase1selection: selection};\r\n            let cardArray = [];\r\n\r\n            if (localStorage.getItem(\"cardArray\"))\r\n                cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n            cardArray.push(saveData);\r\n            localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n            if (state.cardsDrawn == decks[props.chosenDeck].cards.length - 1) {\r\n\r\n                /**\r\n                 * If all the cards have been saved, show Fade out effect and\r\n                 * emit 'phasecomplete' to the parent component to get to the next phase\r\n                 */\r\n                const phaseSuccessful = checkIfPhaseSuccessful();\r\n                if (phaseSuccessful)\r\n                    fadeOutElements();\r\n                else\r\n                    state.backToStart = true;\r\n            }\r\n\r\n            state.cardsDrawn++;\r\n            // Set next card to be current card if there are cards left in the deck\r\n            if (state.cardsDrawn < decks[props.chosenDeck].cards.length)\r\n                state.currentCard = decks[props.chosenDeck].cards[state.cardsDrawn];\r\n        }\r\n\r\n        const checkIfPhaseSuccessful = () => {\r\n\r\n            /**\r\n             * When there are no cards left, check if there are total of 2 cards\r\n             * in Challenge, Wish and Problem cards and total of 2 cards in\r\n             * Asser cards. If so, continue to Phase 2, otherwise start over Phase 1.\r\n             */\r\n            let challengeWishProblemCount = 0;\r\n            let assetCount = 0;\r\n            const cardArray = JSON.parse(localStorage.getItem('cardArray'));\r\n\r\n            /**\r\n             * Count total cards in Challenge, Wish and Problem cards.\r\n             * Count total cards in Asset cards.\r\n             */\r\n            cardArray.forEach(card => {\r\n                if (card.phase1selection === 'Haaste' ||\r\n                    card.phase1selection === 'Toive' ||\r\n                    card.phase1selection === 'Ongelma')\r\n                    challengeWishProblemCount++;\r\n                else if (card.phase1selection === 'Voimavara')\r\n                    assetCount++;\r\n            });\r\n\r\n            if (challengeWishProblemCount < 2 || assetCount < 2)\r\n                return false;\r\n            else\r\n                return true;\r\n        }\r\n\r\n        const startOver = () => {\r\n            localStorage.removeItem(\"cardArray\");\r\n            state.cardsDrawn = 0;\r\n            state.currentCard = decks[props.chosenDeck].cards[0];\r\n            state.backToStart = false;\r\n            state.tipIndex = 0;\r\n        }\r\n\r\n        const saveDeckInfo = () => {\r\n            const deckInfo = {\r\n                name: decks[props.chosenDeck].name,\r\n                type: decks[props.chosenDeck].type,\r\n                language: decks[props.chosenDeck].language\r\n            }\r\n\r\n            localStorage.setItem(\"deckInfo\", JSON.stringify(deckInfo));\r\n        }\r\n\r\n        saveDeckInfo();\r\n\r\n        return { decks, state, saveSelection, startOver, checkIfPhaseSuccessful, fadeOutElements, props, saveDeckInfo };\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n<\/script>\r\n",xe='// PHASE 2\r\n\r\n<template>\r\n    <div class="container wrapper" :class="[\r\n                state.fadeClass,\r\n                state.visibilityClass,\r\n                state.mouseClass\r\n            ]">\r\n        <div class="split">\r\n            <div id="ChoiceButtons">\r\n                \x3c!-- Empty divs are used as containers for the conversation triangles. --\x3e\r\n                <div :class="{ highlight: state.progress == 0 }"></div>\r\n                <div :class="{ highlight: state.progress == 2 }"></div>\r\n                <div :class="{ highlight: state.progress == 1 }"></div>\r\n                <div :class="{ highlight: state.progress == 3 }"></div>\r\n                <div v-if="state.progress < 4" id="decks">\r\n                    <div v-if="state.progress <= 1" class="choice global-hover" @click="chooseCardType(\'Haaste\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Haaste</p>\r\n                    </div>\r\n                    <div v-if="state.progress <= 1" class="choice global-hover" @click="chooseCardType(\'Toive\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Toive</p>\r\n                    </div>\r\n                    <div v-if="state.progress <= 1" class="choice global-hover" @click="chooseCardType(\'Ongelma\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Ongelma</p>\r\n                    </div>\r\n                     <div v-if="state.progress > 1" class="choice global-hover" @click="chooseCardType(\'Voimavara\')">\r\n                        <img src="../assets/cardStack.png" alt="ValintaPakka">\r\n                        <p>Voimavara</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class="split">\r\n            <div class="trigenda-wrapper">\r\n                <img src="../assets/Alusta_tumma.png">\r\n                <div id="trigendaBoard">\r\n                    <div>\r\n                        <div v-if="state.progress >= 0" :class="{ triangle2: state.progress > 0 }" class="triangle"></div>\r\n                    </div>\r\n                    <div>\r\n                        <div v-if="state.progress >= 2" :class="{  triangle2: state.progress > 2 }" class="triangle"></div>\r\n                    </div>\r\n                    <div>\r\n                        <div v-if="state.progress >= 1" :class="{  triangle2: state.progress > 1 }" class="triangle"></div>\r\n                    </div>\r\n                    <div>\r\n                        <div v-if="state.progress >= 3" :class="{  triangle2: state.progress > 3 }" class="triangle"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id="tips">\r\n            <p><span class="bold">Tavoite: </span>Tavoite on ongelma, haaste tai toive, jonka pyrimme keskustelussa ratkaisemaan.</p>\r\n            <p><span class="bold">Ongelma: </span>Ongelma hidastaa sinua tavoitteesi saavuttamisessa.</p>\r\n            <p><span class="bold">Voimavara: </span>Koet tämän asian vahvuutenasi, saat siitä voimaa ja se auttaa jaksamaan.</p>\r\n            </div>\r\n            \x3c!-- Show "Next stage" button if state.overlayIsActive is set to false --\x3e\r\n            <Tip v-if="!state.backToStart && props.showInfo" :tipMsg="state.tipMsg[state.progress]" :mood="state.tipMood" />\r\n        </div>\r\n\r\n        \x3c!-- Overlay is a component where card selection and answer choices are\r\n        made for a current card placeholder shown in Phase2 component. Overlay is shown over the\r\n        Phase2 component and Phase2 is shown transparent behind the Overlay.\r\n        --\x3e\r\n        <Overlay v-if="state.overlayVisibility"\r\n            :cardType="state.overlayCardType"\r\n            :selectionType="state.selectionType"\r\n            @deactivateOverlay="deactivateOverlay"\r\n            @phasecomplete="finishPhase"\r\n            @goBack="goBack" />\r\n    </div>\r\n</template>\r\n',Ne="<script>\r\n\r\nimport Card from \"./Card.vue\";\r\nimport Answer from \"./Answer.vue\";\r\nimport Overlay from \"./Overlay.vue\";\r\nimport Tip from './Tip.vue';\r\nimport { reactive } from \"vue\";\r\nimport Summary from './Summary.vue';\r\n\r\nexport default {\r\n    name: \"Phase2\",\r\n    props: {\r\n        msg: String,\r\n        showInfo: Boolean\r\n    },\r\n    components: {\r\n        Card,\r\n        Answer,\r\n        Overlay,\r\n        Tip,\r\n        Summary\r\n    },\r\n    setup(props, { emit } ) {\r\n\r\n        const state = reactive({\r\n            // Fade effect CSS class for Container div. ('fadeIn' or 'fadeOut')\r\n            fadeClass: null,\r\n            // Visibility CSS class for Container div. ('visible' or 'hidden')\r\n            visibilityClass: 'hidden',\r\n\r\n            /**\r\n             * Mouse CSS class for Container div,\r\n             * tells if mouse clicks are enabled or disabled. ('mouseEnabled' or 'mouseDisabled')\r\n             */\r\n            mouseClass: 'mouseDisabled',\r\n            // Overlay is shown or hidden based on state.overlayVisibility boolean value.\r\n            overlayVisibility: false,\r\n            // OverlaycardType tells what kind of cards are shown in Overlay's CardSelection component.\r\n            overlayCardType: null,\r\n            // SelectionType tells where the card will be placed in Trigenda triangle.\r\n            selectionType: null,\r\n\r\n            /**\r\n             * SelectionType, Tringo's message are set based on progress index. The \"Next Phase\"\r\n             * button is shown if progress is 4.\r\n             */\r\n            progress: 0,\r\n            cardArray: JSON.parse(localStorage.getItem(\"cardArray\")),\r\n            // Tringo's messages. Strings separated by comma in the arrays creates a line break in the message.\r\n            tipMsg: [\r\n                ['Olet nyt suorittanut keskustelun ensimmäisen vaiheen. Seuraavaksi valitset edellisen vaiheen ongelmista, haasteista tai toiveista kortin keskustelun tavoitteeksi.', 'Tavoite on asia, johon pyrimme keskustelun avulla löytämään ratkaisuja. Tästä eteenpäin pyydän sinua myös avaamaan valintojasi kirjoittamalla tekstikenttiin.'],\r\n                ['Hienoa! Nyt keskustelulla on tavoite. Seuraavaksi valitsemme haasteen, joka hidastaa tämän tavoitteen toteutumista.', 'Sinulla on mahdollisuus valita joko ongelma, haaste tai toive. Tarvittaessa voit tutkia myös edellisen vaiheen \"En osaa sanoa\" -kortteja.'],\r\n                ['Nyt valittuna ovat tavoite sekä haaste. Seuraavaksi alamme ratkomaan haastetta voimavarojasi käyttäen.', 'Valitse seuraavaksi ensimmäinen merkittävä voimavarasi. Tarvittaessa voit tutkia myös edellisen vaiheen \"En osaa sanoa\" -kortteja.'],\r\n                ['Hyvä! Valitsethan vielä toisen voimavaran.'],\r\n            ],\r\n            // Sets the mood of Tringo, passed to Tip component. 'happy', 'confused' or 'sad'\r\n            tipMood: 'happy',\r\n        });\r\n\r\n        const fadeInElements = () => {\r\n            state.fadeClass = 'fadeIn';\r\n            state.visibilityClass = 'visible';\r\n            setTimeout(() => {\r\n                state.mouseClass = 'mouseEnabled';\r\n            }, 200);\r\n        }\r\n\r\n        fadeInElements();\r\n\r\n        const activateOverlay = () => {\r\n            state.overlayVisibility = true;\r\n        }\r\n\r\n        const deactivateOverlay = () => {\r\n            state.overlayVisibility = false;\r\n            state.progress++;\r\n\r\n            if (state.progress === 4)\r\n                finishPhase();\r\n        }\r\n\r\n        const finishPhase = () => {\r\n            emit(\"phasecomplete\");\r\n        }\r\n        const chooseCardType = (cardType) => {\r\n            state.overlayCardType = cardType;\r\n\r\n            if (state.progress === 0)\r\n                state.selectionType = \"Tavoite\"\r\n            else if (state.progress === 1)\r\n                state.selectionType = \"Haaste\"\r\n            else if (state.progress === 2)\r\n                state.selectionType = \"Voimavara1\"\r\n            else if (state.progress === 3)\r\n                state.selectionType = \"Voimavara2\"\r\n            activateOverlay();\r\n        }\r\n        const goBack = () => {\r\n            state.overlayCardType = null;\r\n            state.selectionType = null;\r\n            state.overlayVisibility = false;\r\n        }\r\n        return { activateOverlay, state, deactivateOverlay, finishPhase, chooseCardType, goBack, props };\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n\r\n<\/script>",Re='// OVERLAY\r\n\r\n<template>\r\n    <div id="answerBox">\r\n        \x3c!-- CardSelection component is for choosing a card to Phase2 current placeholder.\r\n            CardSelection shows cards from cardsToChooseFrom array which is saved in state\r\n            object.\r\n            SelectionType prop tells the placeholder where the card will be placed. --\x3e\r\n        <div>\r\n            <CardSelection\r\n                v-if="state.progress == 0"\r\n                :title="state.propsTitle"\r\n                :cardsToChooseFrom="state.cardsToChooseFrom"\r\n                :selectionType="props.selectionType"\r\n                :dontKnowCardsAreActive="state.dontKnowCardsAreActive"\r\n                :backEnabled="true"\r\n                @saveCardChoice="saveCardChoice"\r\n                @goBack="goBack(\'CardSelection\')" />\r\n        </div>\r\n            \x3c!-- Answer component saves the answer why the card was chosen to the placeholder.\r\n            Card and the title of Answer component is passed by props. --\x3e\r\n        <div class="vert-center">\r\n            <Answer\r\n                v-if="state.progress == 1"\r\n                :title="state.propsTitle"\r\n                :card="state.answerToCard"\r\n                @answer="saveAnswer"\r\n                @goBack="goBack(\'Answer\')" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n',Pe="<script>\r\n\r\nimport {reactive} from \"vue\";\r\nimport Card from \"./Card.vue\";\r\nimport Answer from \"./Answer.vue\";\r\nimport CardTypeSelection from './CardTypeSelection.vue';\r\nimport CardSelection from './CardSelection.vue';\r\n\r\nexport default {\r\n    name: \"Overlay\",\r\n    components: {\r\n        Card,\r\n        Answer,\r\n        CardTypeSelection,\r\n        CardSelection\r\n    },\r\n    props: {\r\n\r\n        /**\r\n         * CardType is used for the title texts passed to CardSelection and Answer component in \r\n         * template and to choose right types of cards to cardsToChooseFrom array.\r\n         * selectionType tells where the card will be placed in Phase 2.\r\n         */\r\n        cardType: String,\r\n        selectionType: String,\r\n    },\r\n    setup(props, {emit}) {\r\n\r\n        /**\r\n         * State object saves the progress index of the Overlay. The right component is\r\n         * shown to the user based on the progress index.\r\n         * cardsToChooseFrom is passed as a prop to CardSelection component when it's\r\n         * time to choose a card for the placeholder.\r\n         * dontKnowCardsAreActive is boolean value, passed to CardSelection component\r\n         * and tells if a card can be chosen from cards placed to Don't know in Phase 1.\r\n         * propsTitle is the title passed to either CardSelection or Answer component.\r\n         * answerToCard is passed to Answer component. Means which card the\r\n         * answer will be saved to.\r\n         * history array saves the actions user has taken during the overlay so when goBack\r\n         * is called, the right kind of information is deleted from right card based on the history. \r\n         */\r\n        const state = reactive({\r\n            progress: 0,\r\n            cardsToChooseFrom: [],\r\n            dontKnowCardsAreActive: false,\r\n            propsTitle: null,\r\n            answerToCard: null,\r\n            history: [],\r\n        });\r\n\r\n        const saveCardsToChooseFrom = () => {\r\n            const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n            // Set right type of cards to cardsToChooseFrom array\r\n            state.cardsToChooseFrom = cardArray.filter(card => {\r\n                if (card.phase1selection == props.cardType && !card.phase2selection)\r\n                    return card;\r\n            });\r\n\r\n            state.dontKnowCardsAreActive = false;\r\n\r\n            if (props.selectionType === 'Tavoite')\r\n                state.dontKnowCardsAreActive = true;\r\n            else if (props.selectionType === 'Ongelma')\r\n                state.dontKnowCardsAreActive = true;\r\n            else if (props.selectionType === 'Voimavara1')\r\n                state.dontKnowCardsAreActive = true;\r\n            else if (props.selectionType === 'Voimavara2')\r\n                state.dontKnowCardsAreActive = true;\r\n\r\n            state.propsTitle = 'Valitsit aihepiirin ' + props.cardType + '. Minkä kortin haluat käsitellä?';\r\n        }\r\n\r\n        const saveCardChoice = (card, selectionType) => {\r\n\r\n            /**\r\n             * Gets the cardArray from localStorage, finds the right card by id of the card in parameter.\r\n             * Saves the phase2selection to the card and saves the array back to localStorage.\r\n             */\r\n            console.log(card, selectionType)\r\n            const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n            const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === card.id);\r\n\r\n            cardArray[cardToModifyIndex].phase2selection = selectionType;\r\n            localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n\r\n            // Push object to history array. It's used when goBack is called to know what property from which card to delete\r\n            const historyToSave = { modifiedCardId: cardArray[cardToModifyIndex].id, modifiedCardProperty: 'phase2selection' };\r\n            state.history.push(historyToSave);\r\n\r\n            state.answerToCard = card;\r\n\r\n            if (state.answerToCard.phase1selection === \"EnOsaaSanoa\")\r\n                state.propsTitle = 'Valitsit kortin ' + state.answerToCard.description + '. Halutessasi voit perustella valintasi lyhyesti.'\r\n            else\r\n                state.propsTitle = 'Valitsit aihepiirin ' + props.cardType + ' ja sieltä kortin ' + state.answerToCard.description + '. Halutessasi voit perustella valintasi lyhyesti.'\r\n\r\n            state.progress++;\r\n        }\r\n\r\n        const saveAnswer = (card, answer) => {\r\n\r\n            /**\r\n             * Gets the cardArray from localStorage, finds the right card by id of the card in parameter.\r\n             * Saves the answer to the card and saves the array back to localStorage.\r\n             */\r\n            const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n            const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === card.id);\r\n            cardArray[cardToModifyIndex].answer = answer;\r\n            localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n            state.answerToCard = null;\r\n\r\n            emit(\"deactivateOverlay\");\r\n        }\r\n\r\n        const goBack = (from) => {\r\n            // If going back from CardSelection, let Phase 2 component handle goBack\r\n            if (from === \"CardSelection\")\r\n                emit('goBack');\r\n            else if (from === \"Answer\") {\r\n\r\n                /**\r\n                 * If going back from answer component, checks last item in history array,\r\n                 * gets cardArray from localStorage, deletes the right property from right card,\r\n                 * and saves cardArray back to localStorage\r\n                 */\r\n                const modifiedCardId = state.history[state.history.length-1].modifiedCardId;\r\n                const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n                const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === modifiedCardId);\r\n\r\n                if (state.history[state.history.length-1].modifiedCardProperty === \"phase2selection\")\r\n                    delete cardArray[cardToModifyIndex].phase2selection;\r\n\r\n                localStorage.setItem(\"cardArray\", JSON.stringify(cardArray));\r\n\r\n                state.answerToCard = null;\r\n                state.propsTitle = 'Valitsit aihepiirin ' + props.cardType + '. Minkä kortin haluat käsitellä?';\r\n\r\n                state.progress--;\r\n            }\r\n        }\r\n\r\n        saveCardsToChooseFrom();\r\n        return { state, saveAnswer, saveCardsToChooseFrom, saveCardChoice, props, goBack };\r\n\r\n    },\r\n    emits: ['deactivateOverlay', 'goBack'],\r\n}\r\n\r\n<\/script>\r\n",Le='<template>\r\n    <div class="container wrapper">\r\n        <div class="split">\r\n            <div id="answers" v-for="(answer, index) in state.summaryAnswers" :key="index">\r\n                <h3>{{ state.answerTitles[answer.id] }}</h3>\r\n                <img src="../assets/pen.png" width="15" @click="editAnswer(index)">\r\n                <p>{{ answer.comment }}</p>\r\n            </div>\r\n            <SummaryAnswer\r\n                :class="{ hidden: state.progress === 4 }"\r\n                :title="state.answerTitles[state.progress]"\r\n                :progress="state.progress"\r\n                :comment="state.answerComment"\r\n                @answer="saveAnswer" />\r\n            <div v-if="state.progress === 4" id="ready">\r\n                <h2>Hienoa! Jos olet valmis, jatka seuraavaan vaiheeseen.<br> Voit halutessasi vielä muokata antamiasi vastauksia.</h2>\r\n                <button @click="finishPhase">Seuraavaan vaiheeseen</button>\r\n            </div>\r\n        </div>\r\n        <div class="split">\r\n            <div id="trigendaBoard">\r\n                <div class="cardDiv">\r\n                    <div id="triangleImage">\r\n                        <h1 id="descBottom">{{ state.goalCard.description }}</h1>\r\n                    </div>\r\n                </div>\r\n                <div id="secondCardRow">\r\n                    <div class="cardDiv">\r\n                        <div id="triangleImage">\r\n                            <h1 id="descBottom">{{ state.assetOneCard.description }}</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div class="cardDiv">\r\n                        <div id="triangleImage">\r\n                            <h1 id="descBottom">{{ state.challengeCard.description }}</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div class="cardDiv">\r\n                        <div id="triangleImage">\r\n                            <h1 id="descBottom">{{ state.assetTwoCard.description }}</h1>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n',Me="<script>\r\nimport Card from './Card.vue';\r\nimport { reactive } from 'vue';\r\nimport SummaryAnswer from './SummaryAnswer.vue';\r\n\r\nexport default {\r\n    name: \"Summary\",\r\n    props: {\r\n        msg: String,\r\n    },\r\n    components: {\r\n        Card,\r\n        SummaryAnswer\r\n    },\r\n    setup(props, { emit }) {\r\n        const state = reactive({\r\n            // Index of the current answer\r\n            progress: 0,\r\n            // Title for SummaryAnswer component, array index based on progress\r\n            answerTitles: ['Keskustelun pääsisällöt, mistä asioista keskusteltiin:',\r\n                'Keskustelussa nousseet tavoitteet ja keinot niiden saavuttamiseksi:',\r\n                'Keskustelun oivallukset:',\r\n                'Vapaa sana:'\r\n            ],\r\n            // Prop to SummaryAnswer, sets the comment for the textbox\r\n            answerComment: '',\r\n\r\n            /**\r\n             * Answer objects in the array, Id property is based on progress and comment is\r\n             * based on given answer in the SummaryAnswer component\r\n             */\r\n            summaryAnswers: [],\r\n            // Cards based on placement in Phase 2\r\n            goalCard: null,\r\n            challengeCard: null,\r\n            assetOneCard: null,\r\n            assetTwoCard: null\r\n        });\r\n\r\n        const cardArray = JSON.parse(localStorage.getItem(\"cardArray\"));\r\n\r\n        state.goalCard = cardArray.find(card => card.phase2selection === 'Tavoite');\r\n        state.challengeCard = cardArray.find(card => card.phase2selection === 'Haaste');\r\n        state.assetOneCard = cardArray.find(card => card.phase2selection === 'Voimavara1');\r\n        state.assetTwoCard = cardArray.find(card => card.phase2selection === 'Voimavara2');\r\n\r\n\r\n        const saveAnswer = (answer) => {\r\n            const oldAnswerIndex = state.summaryAnswers.findIndex(answer => answer.id === state.progress);\r\n\r\n            /**\r\n             * Check if there is already given comment on current answer. This is possible if user is\r\n             * editing an already existing answer.\r\n             * if old comment exists, replace it. Otherwise push a new answer to summaryAnswers\r\n             */\r\n            if (oldAnswerIndex >= 0)\r\n                state.summaryAnswers[oldAnswerIndex].comment = answer;\r\n            else\r\n                state.summaryAnswers.push({ id: state.progress, comment: answer });\r\n\r\n            localStorage.setItem('summaryAnswers', JSON.stringify(state.summaryAnswers));\r\n\r\n            /**\r\n             * Increases progress as long as there is not given answer in progress index.\r\n             * This way we get always to the latest not-yet-given answer after editing an old comment.\r\n             * Or to end of the Summary if all answers are already given\r\n             */\r\n            while (state.summaryAnswers[state.progress])\r\n                state.progress++;\r\n\r\n            state.answerComment = '';\r\n        }\r\n\r\n        const editAnswer = (index) => {\r\n            state.progress = index;\r\n            state.answerComment = state.summaryAnswers[index].comment;\r\n        }\r\n\r\n        const finishPhase = () => {\r\n            emit('phasecomplete');\r\n        }\r\n\r\n        return { state, saveAnswer, editAnswer, finishPhase };\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n\r\n<\/script>\r\n",Ve='<template>\r\n    <div class="container">\r\n        <h2 class="unselectable">Kiitos, kun kävit Trigenda -keskustelun!</h2>\r\n        <button id="saveButton" @click="savePDF">\r\n            <div id="buttonContent">\r\n                <span id="buttonText">Tallenna keskustelu</span>\r\n                <div id="buttonImage"></div>\r\n            </div>\r\n        </button>\r\n    </div>\r\n</template>\r\n',Fe="<script>\r\nimport { jsPDF } from \"jspdf\";\r\nexport default {\r\n    name: 'SavePDF',\r\n    setup() {\r\n\r\n        const savePDF = () => {\r\n            const cardArray = JSON.parse(localStorage.getItem('cardArray'));\r\n            // Const feedbackCards = JSON.parse(localStorage.getItem('feedbackCards'));\r\n            const deckInfo = JSON.parse(localStorage.getItem('deckInfo'));\r\n            const summaryAnswers = JSON.parse(localStorage.getItem('summaryAnswers'));\r\n\r\n            const chosenPhaseTwoCards = [];\r\n\r\n            const goalCardP2 = cardArray.find(card => card.phase2selection === 'Tavoite');\r\n            const challengeCardP2 = cardArray.find(card => card.phase2selection === 'Haaste');\r\n            const assetOneCardP2 = cardArray.find(card => card.phase2selection === 'Voimavara1');\r\n            const assetTwoCardP2 = cardArray.find(card => card.phase2selection === 'Voimavara2');\r\n\r\n            chosenPhaseTwoCards.push(goalCardP2, challengeCardP2, assetOneCardP2, assetTwoCardP2);\r\n\r\n            const selectedDeckType = deckInfo.type;\r\n            const selectedDeckName = deckInfo.name;\r\n\r\n            const summaryAnswer1 = summaryAnswers[0].comment;\r\n            const summaryAnswer2 = summaryAnswers[1].comment;\r\n            const summaryAnswer3 = summaryAnswers[2].comment;\r\n            const summaryAnswer4 = summaryAnswers[3].comment;\r\n\r\n            let today = new Date();\r\n            const dd = String(today.getDate()).padStart(2, '0');\r\n            const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n            const yyyy = today.getFullYear();\r\n\r\n            today = dd + '.' + mm + '.' + yyyy;\r\n\r\n            // Default export is a4 paper, portrait, using millimeters for units\r\n            const doc = new jsPDF({\r\n                orientation: 'p',\r\n                unit: 'px',\r\n                format: 'a4',\r\n                putOnlyUsedFonts: true\r\n            });\r\n\r\n            const docWidth = doc.internal.pageSize.getWidth();\r\n            const docHeight = doc.internal.pageSize.getHeight();\r\n\r\n            doc.line(20, 80, docWidth - 20, 80);\r\n            doc.line(20, 105, docWidth - 20, 105);\r\n            doc.line(20, 130, docWidth / 2 - 5, 130);\r\n            doc.line(docWidth / 2 + 5, 130, docWidth - 20, 130);\r\n            doc.line(20, 155, docWidth / 2 - 5, 155);\r\n            doc.line(docWidth / 2 + 5, 155, docWidth - 20, 155);\r\n            doc.line(20, 180, docWidth - 20, 180);\r\n\r\n            doc.rect(5, 5, docWidth - 10, docHeight - 10);\r\n\r\n            doc.rect(20, 200, docWidth - 40, 90);\r\n            doc.rect(20, 200, docWidth - 40, 12);\r\n\r\n            doc.rect(20, 305, docWidth - 40, 90);\r\n            doc.rect(20, 305, docWidth - 40, 12);\r\n\r\n            doc.rect(20, 410, docWidth - 40, 90);\r\n            doc.rect(20, 410, docWidth - 40, 12);\r\n\r\n            doc.rect(20, 515, docWidth - 40, 90);\r\n            doc.rect(20, 515, docWidth - 40, 12);\r\n\r\n            doc.text(`Päiväys: ${today}`, 20, 75);\r\n            doc.text(`Valittu pakka: ${selectedDeckName} / ${selectedDeckType}`, 20, 100);\r\n            doc.text(`Tavoite: ${goalCardP2.description}`, 20, 125);\r\n            doc.text(`Haaste: ${challengeCardP2.description}`, 230, 125);\r\n            doc.text(`Voimavara 1: ${assetOneCardP2.description}`, 20, 150);\r\n            doc.text(`Voimavara 2: ${assetTwoCardP2.description}`, 230, 150);\r\n            doc.text(`Aihe valikoitui seuraavasta pinosta: ${goalCardP2.phase1selection}`, 20, 175);\r\n            doc.setFontSize(12.5);\r\n            doc.text(`Keskustelun pääsisällöt, mistä asioista keskusteltiin:`, 25, 210);\r\n            doc.text(`Keskustelussa nousseet tavoitteet ja keinot niiden saavuttamiseksi:`, 25, 315);\r\n            doc.text(`Keskustelun oivallukset:`, 25, 420);\r\n            doc.text(`Vapaa sana:`, 25, 525);\r\n            doc.setFontSize(10);\r\n            doc.text(summaryAnswer1, 25, 222.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n            doc.text(summaryAnswer2, 25, 327.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n            doc.text(summaryAnswer3, 25, 432.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n            doc.text(summaryAnswer4, 25, 537.5, {\r\n                maxWidth: 395,\r\n                align: 'left'\r\n            });\r\n\r\n            /**\r\n             *Function getBase64Image(src, callback) {\r\n             *   const img = new Image();\r\n             *   img.crossOrigin = 'Anonymous';\r\n             *   img.addEventListener('load', function() {\r\n             *       const canvas = document.createElement('canvas');\r\n             *       const ctx = canvas.getContext('2d');\r\n             *       let dataURL;\r\n             *       canvas.height = img.naturalHeight;\r\n             *       canvas.width = img.naturalWidth;\r\n             *       ctx.drawImage(img, 0, 0);\r\n             *       dataURL = canvas.toDataURL('png');\r\n             *       callback(dataURL);\r\n             *   }, false);\r\n             *   img.src = src;\r\n             *}\r\n             *getBase64Image('http://localhost:8080/img/DigiLogo.ae6d527d.png', (response) => {\r\n             *   // Logo size: 215 x 75 pixels\r\n             *   doc.addImage(response, 'png', 163, 10);\r\n             *   doc.save(\"Trigenda_yhteenveto.pdf\");\r\n             *})\r\n             */\r\n            doc.save(\"Trigenda_yhteenveto.pdf\");\r\n        }\r\n\r\n        return { savePDF };\r\n    }\r\n}\r\n<\/script>\r\n",De='<template>\r\n    <div class="container">\r\n     <nav>\r\n      <router-link to="/trigendainfo">YLEISTÄ</router-link>\r\n      <router-link to="/conversation">DEMOKESKUSTELU</router-link>\r\n      <a\r\n        href="https://docs.google.com/forms/d/e/1FAIpQLSd6f_TYtuLMLXUoUwj84LPRga-Lyo5XPyMBKfyZ_ozCIIZIuw/viewform?usp=sf_link"\r\n        >ARVOSTELE</a\r\n      >\r\n      <router-link to="/login">OMA SIVU</router-link>\r\n    </nav>\r\n    <img id="logo" src="..\\assets\\Trigendadigi.png" alt="logo">\r\n        <div id="login">\r\n            <label for="username">Username: </label>\r\n            <input type="text" name="username" id="username" v-model="username"><br>\r\n            <label for="password">Password: </label>\r\n            <input type="password" name="password" id="password" v-model="password"><br>\r\n            <button id="loginButton" @click="login">Kirjaudu</button>\r\n        </div>\r\n    <footer>\r\n      <p>TRIGENDADIGI</p>\r\n      <p>demo 1</p>\r\n      <p>OTA YHTEYTTÄ</p>\r\n      <p>email: info@trigenda.fi</p>\r\n    </footer>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport userService from \'../services/user.js\';\r\nimport { ref } from \'vue\';\r\n\r\nexport default {\r\n    name: \'Login\',\r\n    props: {\r\n\r\n    },\r\n    setup() {\r\n        const username = ref(\'\');\r\n        const password = ref(\'\');\r\n\r\n        const login = async () => {\r\n            const credentials = { username: username.value, password: password.value };\r\n            const response = await userService.processCredentials(credentials, \'login\');\r\n\r\n            if (response.token) {\r\n                console.log(response.token);\r\n                document.cookie=`token=${response.token}`;\r\n            }\r\n            else\r\n                console.log(\'Ei tokenia\');\r\n        }\r\n\r\n        return { username, password, login };\r\n    }\r\n\r\n}\r\n<\/script>\r\n\r\n\x3c!-- Add "scoped" attribute to limit CSS to this component only --\x3e\r\n<style scoped>\r\nhtml, body {\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n\r\nh2 {\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  font-size: 20px;\r\n}\r\n\r\nnav {\r\n  display: flex;\r\n  background-color: #444444;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  max-height: 25%;\r\n  overflow: hidden;\r\n  z-index: 1;\r\n  justify-content: center;\r\n}\r\nnav > a:hover {\r\n  color: #48a3a7;\r\n}\r\nnav > a {\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 1em 3em;\r\n  margin: 0 0.1em;\r\n  width: 10em;\r\n  font-size: 0.9em;\r\n}\r\n#logo{\r\n    margin-top:3em;\r\n   width: 25vw;\r\n   -webkit-filter: drop-shadow(10px 10px 15px rgba(0, 0, 0, 0.1));\r\n  filter: drop-shadow(10px 10px 15px rgba(0, 0, 0, 0.1));\r\n}\r\n#login{\r\n    margin-top:3em;\r\n    margin-bottom:3.65em;\r\n}\r\nlabel{\r\n    display:block;\r\n}\r\nfooter {\r\n  background-color: #444444;\r\n  width: 100%;\r\n  color: white;\r\n  margin-top: 3em;\r\n  padding-top: 2em;\r\n  padding-bottom: 2em;\r\n  text-align: left;\r\n}\r\nfooter > p {\r\n  margin-left: 12vw;\r\n}\r\nbody {\r\n  min-height: 100%;\r\n  height: 100%;\r\n  font-family: \'Bahnschrift\', Times, serif;\r\n  background: linear-gradient(\r\n    180deg,\r\n    rgba(255, 255, 255, 1) 46%,\r\n    rgba(174, 174, 174, 1) 100%\r\n  );\r\n  width: 100%;\r\n}\r\n</style>\r\n',Be="<script>\r\nimport userService from '../services/user.js';\r\nimport { ref } from 'vue';\r\nimport Navbar from './Navbar.vue';\r\nimport { useStore } from 'vuex'\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport default {\r\n    name: 'Login',\r\n    components: {\r\n        Navbar\r\n    },\r\n    setup() {\r\n        const username = ref('');\r\n        const password = ref('');\r\n        const store = useStore();\r\n\r\n        const login = async () => {\r\n            const credentials = { username: username.value, password: password.value };\r\n            // Post username and password to backend\r\n            const response = await userService.processCredentials(credentials, 'login');\r\n\r\n            // If login is successful, jwt token should have been sent from backend and saved to cookie\r\n            if (response.token) {\r\n                console.log(response.token);\r\n                document.cookie=`token=${response.token}`;\r\n                const decodedToken = jwt.decode(response.token);\r\n                store.commit('setLoggedUser', decodedToken.username);\r\n            }\r\n            else\r\n                console.log('Ei tokenia');\r\n        }\r\n\r\n        return { username, password, login };\r\n    }\r\n\r\n}\r\n<\/script>",He="// store.js\r\n\r\nimport { createStore } from 'vuex';\r\n\r\nexport const store = createStore({\r\n    state: {\r\n        loggedUser: null,\r\n    },\r\n    mutations: {\r\n        setLoggedUser (state, username) {\r\n            state.loggedUser = username;\r\n        }\r\n    }\r\n});",_e="// main.js\r\n\r\nimport { createApp } from 'vue';\r\nimport App from './App.vue';\r\nimport router from './router/router';\r\nimport { store } from './store.js';\r\n\r\nconst app = createApp(App);\r\n\r\napp.use(router);\r\napp.use(store);\r\n\r\napp.mount('#app');",Ue='// PHASE 2\r\n\r\n<template>\r\n    <div class="container" :class="{\r\n            fadeIn: state.phaseFadeIn,\r\n            mouseActive: state.mouseActive,\r\n            mouseDisabled: !state.mouseActive\r\n        }">\r\n        <div id="trigendaBoard">\r\n            \x3c!-- Empty divs are used as containers for the conversation triangles. --\x3e\r\n            <div :class="{ highlight: state.tipIndex == 0 }"></div>\r\n            <div :class="{ highlight: state.tipIndex == 2 }"></div>\r\n            <div :class="{ highlight: state.tipIndex == 1 }"></div>\r\n            <div :class="{ highlight: state.tipIndex == 3 }"></div>\r\n        </div>\r\n        <Tip :class="{\r\n            visible: state.tipIsVisible,\r\n            hidden: !state.tipIsVisible,\r\n            mouseActive: !state.haltProgram,\r\n            mouseDisabled: state.haltProgram,\r\n        }" v-if="!state.backToStart" :tipMsg="state.tipMsg[state.tipIndex]" :mood="state.tipMood" />\r\n    </div>\r\n    \x3c!-- Show "Next stage" button if state.overlayIsActive is set to false --\x3e\r\n    <button v-if="!state.overlayIsActive"\r\n            :class="{\r\n                fadeIn: state.phaseFadeIn,\r\n                mouseActive: state.mouseActive,\r\n                mouseDisabled: !state.mouseActive\r\n            }"\r\n            @click="activateOverlay">Seuraavaan vaiheeseen</button>\r\n    \x3c!-- Overlay is a component where card type selection, card selection and answer choices are\r\n    made for a current card placeholder shown in Phase2 component. Overlay is shown over the\r\n    Phase2 component and Phase2 is shown transparent behind the Overlay.\r\n    Overlay is shown or hidden based on state.overlayIsActive boolean value.\r\n    Overlay emits the info for deactivating the overlay to Phase2 and when the phase is finished.\r\n    --\x3e\r\n    <Overlay :class="{ showOverlay: state.overlayIsActive,\r\n        hideOverlay: !state.overlayIsActive }"\r\n        @deactivateOverlay="deactivateOverlay"\r\n        @phasecomplete="finishPhase" />\r\n</template>',Ke="<script>\r\n\r\nimport Card from \"./Card.vue\";\r\nimport Answer from \"./Answer.vue\";\r\nimport Overlay from \"./Overlay.vue\";\r\nimport Tip from './Tip.vue';\r\nimport { reactive } from \"vue\";\r\n\r\nexport default {\r\n    name: \"Phase2\",\r\n    props: {\r\n        msg: String,\r\n    },\r\n    components: {\r\n        Card,\r\n        Answer,\r\n        Overlay,\r\n        Tip\r\n    },\r\n    setup(props, { emit } ) {\r\n\r\n        /** \r\n         * State object saves the images for the triangles, the state if the Overlay should\r\n         * be shown or not\r\n         */\r\n        const state = reactive({\r\n            phaseFadeIn: false,\r\n            mouseActive: false,\r\n            overlayIsActive: false,\r\n            cardArray: JSON.parse(localStorage.getItem(\"cardArray\")),\r\n            tipMsg: [\r\n                ['Olet nyt suorittanut keskustelun ensimmäisen vaiheen. Seuraavaksi valitset edellisen vaiheen ongelmista, haasteista tai toiveista kortin keskustelun tavoitteeksi.', 'Tavoite on asia, johon pyrimme keskustelun avulla löytämään ratkaisuja. Tästä eteenpäin pyydän sinua myös avaamaan valintojasi kirjoittamalla tekstikenttiin.'],\r\n                ['Hienoa! Nyt keskustelulla on tavoite. Seuraavaksi valitsemme haasteen, joka hidastaa tämän tavoitteen toteutumista.', 'Sinulla on mahdollisuus valita joko ongelma, haaste tai toive. Tarvittaessa voit tutkia myös edellisen vaiheen \"En osaa sanoa\" -kortteja.'],\r\n                ['Nyt valittuna ovat tavoite sekä haaste. Seuraavaksi alamme ratkomaan haastetta voimavarojasi käyttäen.', 'Valitse seuraavaksi ensimmäinen merkittävä voimavarasi. Tarvittaessa voit tutkia myös edellisen vaiheen \"En osaa sanoa\" -kortteja.'],\r\n                ['Hyvä! Valitsethan vielä toisen voimavaran.'],\r\n                [''],\r\n            ],\r\n            tipIndex: 0,\r\n            tipMood: 'happy',\r\n        });\r\n\r\n        const fadeInElements = () => {\r\n            state.phaseFadeIn = true;\r\n            setTimeout(() => {\r\n                state.mouseActive = true;\r\n            }, 1000);\r\n        }\r\n\r\n        fadeInElements();\r\n\r\n        const activateOverlay = () => {\r\n            state.overlayIsActive = true;\r\n        }\r\n\r\n        const deactivateOverlay = () => {\r\n            state.overlayIsActive = false;\r\n            state.tipIndex++;\r\n        }\r\n\r\n        const finishPhase = () => {\r\n            emit(\"phasecomplete\");\r\n        }\r\n        return { activateOverlay, state, deactivateOverlay, finishPhase }\r\n    },\r\n    emits: ['phasecomplete'],\r\n};\r\n\r\n<\/script>\r\n",Je='// OVERLAY\r\n\r\n<template>\r\n    <div id="answerBox">\r\n        \x3c!-- CardTypeSelection, CardSelection and Answer are used multiple times during Phase2 progression.\r\n            Possible card types to choose cards from are Problem, Challenge and Wish --\x3e\r\n        <CardTypeSelection\r\n            v-if="state.progress == 0"\r\n            :title="\'Valitse tavoitteen aihepiiri.\'"\r\n            @saveCardsToChooseFrom="saveCardsToChooseFrom" />\r\n        \x3c!-- CardSelection component is for choosing a card to Phase2 current placeholder.\r\n            CardSelection shows cards from cardsToChooseFrom array which is saved in state\r\n            object based on CardTypeSelection selection.\r\n            Selection prop tells the placeholder where the card will be placed. --\x3e\r\n        <CardSelection\r\n            v-if="state.progress == 1"\r\n            :title="\'Valitsit aihepiirin \' + state.cardType + \'. Minkä kortin haluat käsitellä?\'"\r\n            :cardsToChooseFrom="state.cardsToChooseFrom"\r\n            selection="Tavoite"\r\n            backEnabled=true\r\n            @saveCardChoice="saveCardChoice"\r\n            @goBack="goBack"/>\r\n            \x3c!-- Answer component saves the answer why the card was chosen to the placeholder.\r\n            Card and the title of Answer component is passed by props. --\x3e\r\n        <Answer\r\n            v-if="state.progress == 2"\r\n            :title="\'Valitsit aihepiirin \' + state.cardType + \' ja sieltä kortin \' + state.answerToCard.description + \'. Perustelethan vielä valintasi.\'"\r\n            :card="state.answerToCard"\r\n            @answer="saveAnswer"\r\n            @goBack="goBack"/>\r\n\r\n        <CardTypeSelection\r\n            v-if="state.progress == 3"\r\n            title="Valitse haasteen aihepiiri klikkaamalla mitä tahansa aihepiiriä. Voit myös valita En osaa sanoa -kortteja."\r\n            @saveCardsToChooseFrom="saveCardsToChooseFrom" />\r\n        <CardSelection\r\n            v-if="state.progress == 4"\r\n            :title="\'Valitsit aihepiirin \' + state.cardType + \'. Minkä kortin haluat käsitellä? Voit myös valita En osaa sanoa -korteista.\'"\r\n            :cardsToChooseFrom="state.cardsToChooseFrom"\r\n            selection="Haaste"\r\n            dontKnowCardsAreActive=true\r\n            backEnabled=true\r\n            @saveCardChoice="saveCardChoice"\r\n            @goBack="goBack"/>\r\n        <Answer\r\n            v-if="state.progress == 5"\r\n            :title="\'Valitsit aihepiirin \' + state.cardType + \' ja sieltä kortin \' + state.answerToCard.description + \'. Perustelethan vielä valintasi.\'"\r\n            :card="state.answerToCard"\r\n            @answer="saveAnswer"\r\n            @goBack="goBack"/>\r\n\r\n        <CardSelection\r\n            v-if="state.progress == 6"\r\n            :title="\'Valitse ensimmäinen voimavara. Voit myös selata En osaa sanoa -kortteja.\'"\r\n            :cardsToChooseFrom="state.cardsToChooseFrom"\r\n            dontKnowCardsAreActive=true\r\n            selection="Voimavara1"\r\n            @saveCardChoice="saveCardChoice"\r\n            @goBack="goBack"/>\r\n        <Answer\r\n            v-if="state.progress == 7"\r\n            :title="\'Valitsit ensimmäiseksi voimavaraksi kortin \' + state.answerToCard.description + \'. Perustelethan vielä valintasi.\'"\r\n            :card="state.answerToCard"\r\n            @answer="saveAnswer"\r\n            @goBack="goBack"/>\r\n\r\n        <CardSelection\r\n            v-if="state.progress == 8"\r\n            :title="\'Valitse toinen voimavara. Voit myös selata En osaa sanoa -kortteja.\'"\r\n            :cardsToChooseFrom="state.cardsToChooseFrom"\r\n            dontKnowCardsAreActive=true\r\n            selection="Voimavara2"\r\n            @saveCardChoice="saveCardChoice"\r\n            @goBack="goBack"/>\r\n        <Answer\r\n            v-if="state.progress == 9"\r\n            :title="\'Valitsit toiseksi voimavaraksi kortin \' + state.answerToCard.description + \'. Perustelethan vielä valintasi.\'"\r\n            :card="state.answerToCard"\r\n            @answer="saveAnswer"\r\n            @goBack="goBack"/>\r\n    </div>\r\n</template>',Ge='<script>\r\n\r\nimport {reactive} from "vue";\r\nimport Card from "./Card.vue";\r\nimport Answer from "./Answer.vue";\r\nimport CardTypeSelection from \'./CardTypeSelection.vue\';\r\nimport CardSelection from \'./CardSelection.vue\';\r\n\r\nexport default {\r\n    name: "Overlay",\r\n    components: {\r\n        Card,\r\n        Answer,\r\n        CardTypeSelection,\r\n        CardSelection\r\n    },\r\n    setup(props, {emit}) {\r\n\r\n        /**\r\n         * State object saves the progress index of the Overlay. The right component is\r\n         * shown to the user based on the progress index.\r\n         * cardsToChooseFrom is passed as a prop to CardSelection component when it\'s\r\n         * time to choose a card for the placeholder.\r\n         * answerToCard is passed to Answer component to let it know which card the\r\n         * answer will be saved to.\r\n         * Titles array saves the titles for different progress parts of the Overlay.\r\n         * First title for progress 0, second for progress 1 and so on...\r\n         * history array saves the actions user has taken during the overlay so when goBack\r\n         * is called, the right kind of information is deleted from right card based on the history. \r\n         */\r\n        const state = reactive({\r\n            progress: 0,\r\n            cardsToChooseFrom: [],\r\n            cardType: null,\r\n            answerToCard: null,\r\n            history: [],\r\n        });\r\n\r\n        const saveCardsToChooseFrom = (cardsToChooseFrom, type) => {\r\n\r\n            /**\r\n             * Save cardsToChooseFrom array to state from parameter.\r\n             * Save the history object for later use, if goBack will be selected.\r\n             */\r\n            console.log(cardsToChooseFrom, type);\r\n            state.cardsToChooseFrom = cardsToChooseFrom;\r\n            state.cardType = type;\r\n            state.history[state.progress] = { cardsToChooseFrom: cardsToChooseFrom }\r\n            state.progress++;\r\n            console.log(state.history)\r\n        }\r\n\r\n        const saveCardChoice = (card, selection) => {\r\n\r\n            /**\r\n             * Gets the cardArray from localStorage, finds the right card by id of the card in parameter.\r\n             * Saves the phase2selection to the card and saves the array back to localStorage.\r\n             */\r\n            const cardArray = JSON.parse(localStorage.getItem("cardArray"));\r\n            const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === card.id);\r\n\r\n            cardArray[cardToModifyIndex].phase2selection = selection;\r\n            localStorage.setItem("cardArray", JSON.stringify(cardArray));\r\n\r\n            /**\r\n             * Saves the current card to answerToCard so it can be passed to\r\n             * Answer component.\r\n             * Saves the modified cards index number in cardArray and property which was modified\r\n             * to be used by goBack.\r\n             */\r\n            state.answerToCard = card\r\n            state.history[state.progress] = { modifiedCardIndex: cardToModifyIndex, modifiedProperty: "phase2selection" }\r\n            state.progress++\r\n            console.log(state.history)\r\n        }\r\n\r\n        const saveAnswer = (card, answer) => {\r\n\r\n            /**\r\n             * Gets the cardArray from localStorage, finds the right card by id of the card in parameter.\r\n             * Saves the answer to the card and saves the array back to localStorage.\r\n             */\r\n            const cardArray = JSON.parse(localStorage.getItem("cardArray"));\r\n            const cardToModifyIndex = cardArray.findIndex(cardInArray => cardInArray.id === card.id);\r\n            cardArray[cardToModifyIndex].answer = answer;\r\n            localStorage.setItem("cardArray", JSON.stringify(cardArray));\r\n\r\n            state.answerToCard = null;\r\n\r\n            /**\r\n             * Saves the modified cards index number in cardArray and property which was modified\r\n             * to be used by goBack.\r\n             */\r\n            state.history[state.progress] = { modifiedCardIndex: cardToModifyIndex, modifiedProperty: "answer" }\r\n\r\n            state.progress++;\r\n\r\n            /**\r\n             * If the next stage after Answer component in progress will be Asset1 or Asset2\r\n             * sets the cardsToChooseFrom array to contain Asset cards to be passed to\r\n             * CardSelection component\r\n             */\r\n            if (state.progress === 6)\r\n                state.cardsToChooseFrom = cardArray.filter(card => {\r\n                    if (card.phase1selection === "Voimavara" && !card.phase2selection)\r\n                        return card\r\n                })\r\n\r\n            if (state.progress === 8)\r\n                state.cardsToChooseFrom = cardArray.filter(card => {\r\n                    if (card.phase1selection === "Voimavara" && !card.phase2selection)\r\n                        return card\r\n                })\r\n            console.log(state.history)\r\n            if (state.progress === 10)\r\n                emit("phasecomplete")\r\n\r\n            emit("deactivateOverlay", state.progress);\r\n        }\r\n\r\n        const goBack = () => {\r\n            state.progress--\r\n\r\n            /**\r\n             * Checks if history arrays current (based on the progress number) object has\r\n             * cardsToChooseFrom or modifiedCardIndex property.\r\n             * Set state.cardsToChooseFrom array to the one in history or deletes\r\n             * card\'s property based on the modifiedProperty. \r\n             */\r\n            if (state.history[state.progress].cardsToChooseFrom)\r\n                state.cardsToChooseFrom = state.history[state.progress].cardsToChooseFrom\r\n            else if (typeof state.history[state.progress].modifiedCardIndex !== \'undefined\') {\r\n                const cardArray = JSON.parse(localStorage.getItem("cardArray"))\r\n                if (state.history[state.progress].modifiedProperty === "phase2selection") {\r\n                    delete cardArray[state.history[state.progress].modifiedCardIndex].phase2selection\r\n                    localStorage.setItem("cardArray", JSON.stringify(cardArray))\r\n                }\r\n                else if (state.history[state.progress].modifiedProperty === "answer") {\r\n                    delete cardArray[state.history[state.progress].modifiedCardIndex].answer\r\n                    localStorage.setItem("cardArray", JSON.stringify(cardArray))\r\n                }}\r\n        }\r\n\r\n        return { state, saveAnswer, saveCardsToChooseFrom, goBack, saveCardChoice };\r\n    },\r\n    emits: [\'phasecomplete\', \'deactivateOverlay\'],\r\n}\r\n\r\n<\/script>\r\n',Ye="const sql = require('../dbconnection');\r\n\r\n// Here are methods used for sql database queries\r\nconst Dbmethods = {\r\n    registerUser: (username, passwordHash, type, firstname, lastname, email, organization, callback) => {\r\n        sql.query(`INSERT INTO user (username, passwordhash, type, firstname, lastname, email, organization)\r\n        VALUES (?, ?, ?, ?, ?, ?, ?);`,\r\n        [username, passwordHash, type, firstname, lastname, email, organization],\r\n        callback)\r\n    },\r\n\r\n    findUserByUsername: (username, callback) => {\r\n        sql.query(`SELECT * FROM user WHERE username = ?`,\r\n                    [username],\r\n                    callback);\r\n    }\r\n}\r\n\r\nmodule.exports = Dbmethods;",We="const Dbmethods = require('../services/dbmethods');\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst sql = require('../dbconnection');\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\n\r\nrouter.post('/register', async (req, res) => {\r\n    const body = req.body;\r\n\r\n    console.log(body);\r\n\r\n    const passwordHash = await bcrypt.hash(body.password, 10);\r\n\r\n    console.log(passwordHash);\r\n\r\n    sql.query(`INSERT INTO user (username, passwordhash, type, firstname, lastname, email, organization)\r\n                    VALUES (?, ?, 'admin', ?, ?, ?, ?);`,\r\n                    [body.username, passwordHash, body.firstname, body.lastname, body.email, body.organization],\r\n                    (err, result) => {\r\n                        console.log(err);\r\n                        console.log(result);\r\n                        res.send(result);\r\n    });\r\n});\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const body = req.body;\r\n    console.log(body);\r\n\r\n    await Dbmethods.findUserByUsername(body.username, async (err, result) => {\r\n        const user = result[0];\r\n\r\n        try {\r\n            const passwordCorrect = await bcrypt.compare(body.password, user.passwordhash);\r\n\r\n            if (!passwordCorrect) {\r\n                res.send('Virhe, tarkista käyttäjänimi ja salasana!');\r\n            } else {\r\n                const token = generateAccessToken({ username: user.username, type: user.type });\r\n                console.log('token:', token);\r\n                res.send({ token: token });\r\n            }\r\n\r\n            console.log('USERNAME:', user.username, 'PASSWORDCORRECT:', passwordCorrect);\r\n        }\r\n        catch(error) {\r\n            res.send('Virhe, tarkista käyttäjänimi ja salasana!');\r\n        }\r\n    });\r\n});\r\n\r\n// GET home page.\r\nrouter.get('/', (req, res) => {\r\n    res.send(\"Landing . . .\");\r\n});\r\n\r\nconst generateAccessToken = (payload) => {\r\n    console.log(payload);\r\n    return jwt.sign(payload, process.env.TOKEN_SECRET, { expiresIn: 60 * 60 * 24 });\r\n  }\r\n\r\nmodule.exports = router;",qe="import axios from 'axios';\r\n\r\nconst baseUrl = 'http://localhost:3000/api';\r\n\r\nconst processCredentials = async (credentials, method) => {\r\n    console.log(credentials);\r\n    const response = await axios.post(`${baseUrl}/${method}`, credentials);\r\n    return response.data;\r\n};\r\n\r\nexport default { processCredentials };\r\n\r\n",ze="DROP DATABASE IF EXISTS trigenda;\r\nCREATE DATABASE trigenda;\r\n\r\nUSE trigenda;\r\n\r\nCREATE TABLE Address (\r\naddressid\t\tINT NOT NULL,\r\nstreetaddress\t\tVARCHAR(50),\r\napartment\t\tVARCHAR(10),           \r\ncity\t\t\t\tVARCHAR(85),\r\nstate\t\t\tVARCHAR(50),\r\nzipcode\t\t\tVARCHAR(30),\r\ncountry\t\t\tVARCHAR(50),\r\nPRIMARY KEY (addressid)\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE User (\r\nusername\t\tVARCHAR(20) NOT NULL,\r\npasswordhash\t\tVARCHAR(60) NOT NULL,\r\ntype\t\t\t\tVARCHAR(20) NOT NULL,\r\nfirstname\t\t\tVARCHAR(30) NOT NULL,\r\nlastname\t\t\tVARCHAR(40) NOT NULL,\r\nemail\t\t\tVARCHAR(40),\r\nphone\t\t\tVARCHAR(15),\r\naddressid\t\tINT,\r\norganization\t\tVARCHAR(40),\r\nPRIMARY KEY (username),\r\nCONSTRAINT user_address_fk FOREIGN KEY (addressid) REFERENCES Address(addressid)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE License (\r\nlicenseid\t\t\tINT NOT NULL,\r\nusername\t\tVARCHAR(20) NOT NULL,\r\nPRIMARY KEY (licenseid, username),\r\nCONSTRAINT license_user_fk FOREIGN KEY (username) REFERENCES User(username)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE Deck (\r\ndeckname\t\tVARCHAR(30) NOT NULL,\r\ntype\t\t\t\tVARCHAR(40) NOT NULL,\r\nlanguage\t\t\tVARCHAR(20) NOT NULL,\r\nPRIMARY KEY (deckname)\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE Card (\r\ncardid\t\t\tINT NOT NULL AUTO_INCREMENT,\r\ndeckname\t\tVARCHAR(30) NOT NULL,\r\ndescription\t\tVARCHAR(20) NOT NULL,\r\nPRIMARY KEY (cardid),\r\nCONSTRAINT card_deck_fk FOREIGN KEY (deckname) REFERENCES Deck(deckname)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE DeckLicense (\r\ndeckname\t\tVARCHAR(30) NOT NULL,\r\nlicenseid\t\t\tINT NOT NULL,\r\nusername\t\tVARCHAR(20) NOT NULL,\r\nPRIMARY KEY (deckname, licenseid, username),\r\nCONSTRAINT deck_license_fk FOREIGN KEY (deckname) REFERENCES Deck(deckname)\r\nON DELETE RESTRICT,\r\nCONSTRAINT deck_license_fk2 FOREIGN KEY (licenseid) REFERENCES License(licenseid)\r\nON DELETE RESTRICT,\r\nCONSTRAINT deck_license_fk3 FOREIGN KEY (username) REFERENCES User(username)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE Conversation (\r\nconvid\t\t\tINT NOT NULL AUTO_INCREMENT,\r\ncreator\t\t\tVARCHAR(20) NOT NULL,\r\nattendee\t\t\tVARCHAR(20) NOT NULL,\r\ndate\t\t\t\tDATE NOT NULL,\r\nPRIMARY KEY (convid)\r\n) ENGINE=InnoDB; \r\n\r\nCREATE TABLE UserConversation (\r\nusername\t\tVARCHAR(20) NOT NULL,\r\nconvid\t\t\tINT NOT NULL,\r\nPRIMARY KEY (username, convid),\r\nCONSTRAINT user_conversation_fk FOREIGN KEY (username) REFERENCES User(username)\r\nON DELETE RESTRICT,\r\nCONSTRAINT user_conversation_fk2 FOREIGN KEY (convid) REFERENCES Conversation(convid)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE Phase1Card (\r\nconvid\t\t\tINT NOT NULL,\r\ncardid\t\t\tINT NOT NULL,\r\nphase1selection\tVARCHAR(15),\r\nPRIMARY KEY (convid, cardid),\r\nCONSTRAINT phase1_conv_card_fk FOREIGN KEY (convid) REFERENCES Conversation(convid)\r\nON DELETE RESTRICT,\r\nCONSTRAINT phase1_conv_card_fk2 FOREIGN KEY (cardid) REFERENCES Card(cardid)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE Phase2Card (\r\nconvid\t\t\tINT NOT NULL,\r\ncardid\t\t\tINT NOT NULL,\r\nphase2selection\tVARCHAR(15),\r\nanswer\t\t\tVARCHAR(500),\r\nPRIMARY KEY (convid, cardid),\r\nCONSTRAINT phase2_conv_card_fk FOREIGN KEY (convid) REFERENCES Conversation(convid)\r\nON DELETE RESTRICT,\r\nCONSTRAINT phase2_conv_card_fk2 FOREIGN KEY (cardid) REFERENCES Card(cardid)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n\r\nCREATE TABLE FeedbackCard (\r\nconvid\t\t\tINT NOT NULL,\r\ncardid\t\t\tINT NOT NULL,\r\nanswer\t\t\tVARCHAR(500) NOT NULL,\r\nCONSTRAINT feedback_conv_card_fk FOREIGN KEY (convid) REFERENCES Conversation(convid)\r\nON DELETE RESTRICT,\r\nCONSTRAINT feedback_conv_card_fk2 FOREIGN KEY (cardid) REFERENCES Card(cardid)\r\nON DELETE RESTRICT\r\n) ENGINE=InnoDB;\r\n",$e={name:"Code",setup:function(){Oe.a.highlightAll();var e=Object(a["s"])({visibleContent:0,matterjs:null,phase1backup1:null,phase1demo2:null,overlaydemo2:null,summarydemo2:null,savepdfdemo2:null,logindemo2:null,dbmethodsdemo2:null,backendrouterdemo2:null,userservicedemo2:null,phase2old:null,overlayold:null,main:null,store:null,sqlcode:null}),n=function(e,n){var t=Oe.a.highlight(e,Oe.a.languages.html,"html"),a=Oe.a.highlight(n,Oe.a.languages.javascript,"javascript");return t+a};e.matterjs=n(Ce,we),e.phase1backup1=n(Ae,Se),e.phase1demo2=n(Ee,Ie),e.phase2demo2=n(xe,Ne),e.overlaydemo2=n(Re,Pe),e.summarydemo2=n(Le,Me),e.savepdfdemo2=n(Ve,Fe),e.logindemo2=n(De,Be),e.phase2old=n(Ue,Ke),e.overlayold=n(Je,Ge),e.dbmethodsdemo2=Oe.a.highlight(Ye,Oe.a.languages.javascript,"javascript"),e.backendrouterdemo2=Oe.a.highlight(We,Oe.a.languages.javascript,"javascript"),e.userservicedemo2=Oe.a.highlight(qe,Oe.a.languages.javascript,"javascript"),e.main=Oe.a.highlight(_e,Oe.a.languages.javascript,"javascript"),e.store=Oe.a.highlight(He,Oe.a.languages.javascript,"javascript"),e.sqlcode=Oe.a.highlight(ze,Oe.a.languages.javascript,"javascript");var t=function(n){e.visibleContent=n};return{state:e,toggleVisibility:t}}};t("3233");$e.render=je,$e.__scopeId="data-v-33e05e84";var Qe=$e,Ze=Object(a["C"])("data-v-ffd79666");Object(a["r"])("data-v-ffd79666");var Xe={id:"container"},en={id:"flex"},nn={key:0,class:"content"},tn=Object(a["f"])("p",{class:"contentText"},"Pelin menu musiikki lähti rakentumaan hyvin. Ensimmäisen version jälkeen soundeissa on vielä hakemista ja sävellystä tarvitaan lisää.",-1),an=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535530027?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Menu_V1.mp4"},null,-1),rn=Object(a["f"])("p",{class:"contentText"},"Nyt pääinstrumentti soi korkeammalta ja se on selvästi oikea ratkaisu. Myös uutta sävellystä on lisätty mukaan.",-1),sn=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535530144?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Menu_V2.mp4"},null,-1),on=Object(a["f"])("p",{class:"contentText"},'Menu musiikin lopullinen masteroitu versio kuulostaa massiivisemmalta ja enemmän "in-your-face" tyyliseltä.',-1),ln=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535530247?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Menu2_Final.mp4"},null,-1),cn={key:1,class:"content"},dn=Object(a["f"])("p",{class:"contentText"},"Pelin toimistoon on tarkoitus hakea synkkää, ahdistavaa Dark-Jazz tyylistä musiikkia. Soundit ovat vielä aika raakoja ja volumetasoissa ja kaiuissa on hiomista.",-1),un=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535530365?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Office_V1.mp4"},null,-1),pn=Object(a["f"])("p",{class:"contentText"},"Lisätty mukaan syntikka sävellys ja hiottu soundeja. Sävellystä pitää vielä muuttaa pelin Product Ownerin toiveesta.",-1),mn=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535530479?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Office_V2.mp4"},null,-1),vn=Object(a["f"])("p",{class:"contentText"},"Sävellystä muutettu ja haettu synkempää ja ahdistavampaa fiilistä pelin luonteen mukaisesti. Sävellys on myös masteroitu viimeisen silauksen saamiseksi koko kappaleen soundiin.",-1),hn=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535530584?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Office2_Final.mp4"},null,-1),kn={key:2,class:"content"},yn=Object(a["f"])("p",{class:"contentText"},"Itse pelin aikana soivassa In-Game taustamusiikissa on haettu nimenomaan taustalle soveltuvaa äänimaailmaa, joka voi huoletta loopata pelin edetessä ilman, että pelaaja kiinnittää siihen jatkuvaa huomiota.",-1),fn=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535529848?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"InGame_V1.mp4"},null,-1),gn=Object(a["f"])("p",{class:"contentText"},"Masterointi antaa viimeisen säväyksen taustamusiikille.",-1),bn=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535529945?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"InGame2_Final.mp4"},null,-1),jn={key:3,class:"content"},Tn=Object(a["f"])("p",{class:"contentText"},'Combat musiikki soi pelissä taistelun aikana. Ensimmäinen versio kuulostaa vielä hieman "ohuelta" ja volumetasoja pitää säätää.',-1),On=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535529652?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Combat_V1.mp4"},null,-1),Cn=Object(a["f"])("p",{class:"contentText"},'Sopivien muokkausten ja masteroinnin jälkeen Combat musiikissa on enemmän "voimaa" ja "In-your-face" tyyliä.',-1),wn=Object(a["f"])("iframe",{src:"https://player.vimeo.com/video/535529744?badge=0&autopause=0&player_id=0&app_id=58479",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:"",title:"Combat2_Final.mp4"},null,-1);Object(a["p"])();var An=Ze((function(e,n,t,r,s,i){return Object(a["o"])(),Object(a["c"])("div",Xe,[Object(a["f"])("div",en,[Object(a["f"])("h2",{class:["subMenu",{chosen:0===r.state.visibleContent}],onClick:n[1]||(n[1]=function(e){return r.toggleVisibility(0)})},"MENU",2),Object(a["f"])("h2",{class:["subMenu",{chosen:1===r.state.visibleContent}],onClick:n[2]||(n[2]=function(e){return r.toggleVisibility(1)})},"OFFICE",2),Object(a["f"])("h2",{class:["subMenu",{chosen:2===r.state.visibleContent}],onClick:n[3]||(n[3]=function(e){return r.toggleVisibility(2)})},"IN-GAME",2),Object(a["f"])("h2",{class:["subMenu",{chosen:3===r.state.visibleContent}],onClick:n[4]||(n[4]=function(e){return r.toggleVisibility(3)})},"COMBAT",2)]),0===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",nn,[tn,an,rn,sn,on,ln])):Object(a["d"])("",!0),1===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",cn,[dn,un,pn,mn,vn,hn])):Object(a["d"])("",!0),2===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",kn,[yn,fn,gn,bn])):Object(a["d"])("",!0),3===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",jn,[Tn,On,Cn,wn])):Object(a["d"])("",!0)])})),Sn={name:"Music",setup:function(){var e=Object(a["s"])({visibleContent:0}),n=function(n){e.visibleContent=n};return{state:e,toggleVisibility:n}}};t("076f");Sn.render=An,Sn.__scopeId="data-v-ffd79666";var En=Sn,In=Object(a["C"])("data-v-abb1fcf6");Object(a["r"])("data-v-abb1fcf6");var xn={id:"container"},Nn={id:"flex"},Rn={key:0,class:"content"},Pn=Object(a["f"])("h3",null,"TrigendaDigi web-sovellus",-1),Ln=Object(a["f"])("p",null,"Projektissa loimme web-sovelluksen Trigenda Oy nimiselle yritykselle. Trigenda Oy on Frostigon Oy:n asiakas ja Frostigon Oy toimi meidän toimeksiantajanamme. Trigenda on dialogimenetelmä, jota esimerkiksi Sote-alan ammattilaiset, terapeutit ja työnantajat voivat hyödyntää keskustelun käymisessä asiakkaan tai alaisen kanssa. Projektin tavoitteena oli luoda Trigendan jo olemassa olevasta fyysisestä tuotteesta digitaalinen versio.",-1),Mn=Object(a["f"])("p",null,'Projektin alkuvaiheessa olimme projektiin liittyvistä asioista yhteydessä Frostigon Oy:hyn. Myöhemmässä vaiheessa keskustelimme suoraan Trigenda Oy:n kanssa sovellukseen kehitettävistä ominaisuuksista. Opin kanssakäymistä asiakkaan kanssa ja kuinka kommunikoida sovelluskehitykseen liittyvistä asioista ymmärrettävästi. Aluksi koin haastavaksi teknisten asioiden selittämisen asiakkaille. Opin kuitenkin, että asiat kannattaa selittää mahdollisimman selkeästi ja ns. "maallikon termein", mikäli mahdollista. Saimme Trigenda Oy:ltä riittävän ohjeistuksen ja lisätietoja tarpeen mukaan.',-1),Vn={key:1,class:"content"},Fn=Object(a["f"])("h3",null,"RoboHitman musiikit",-1),Dn=Object(a["f"])("p",null,"Sivutyönä tuotin musiikkia RoboHitman -peliprojektiin. Minulla on laajaa osaamista musiikin saralta jo ennestään. Käytin sävellystyössä DAW:ina Cockos Reaper sovellusta. Soundit sain Native Instruments Kontakt ja Omnispehere plugineista ja rumpusoundeja minulla on tallessa tietokoneella. Rumpusoundeja käytin Native Instrumentsin Battery 3 rumpukoneen kautta. Masterointivaihe hoitui iZotope Ozonen avulla ja kaikki mainitut pluginit oli liitetty Reaperiin.",-1),Bn=Object(a["f"])("p",null,"Projekti oli mielenkiintoinen, sillä pelimusiikit olivat hyvin vaihtelevia tyyliltään ja fiilikseltään. Pääsin harjoittelemaan erilaisten musiikkilajien säveltämistä/tuottamista. Keskustelin RoboHitmanin Product Ownerin kanssa musiikin tyyleistä ja sain linkkejä hyviin referenssi kappaleisiin, joiden pohjalta osasin tuottaa oikeanlaista soundia.",-1),Hn=Object(a["f"])("p",null,"Pyysin Product Owneria kuvailemaan kappaleita adjektiiveilla, eli millainen tunnelma ja millaisia fiiliksiä kappaleista on tarkoitus välittyä. Mielestäni se on yksi parhaista keinoista saada ymmärrys siitä, millaista musiikkia projektiin pitää tuottaa. Product Owner oli tyytyväinen työni tuloksiin. Ainoastaan Office musiikin sävellykseen piti tehdä muutoksia hänen pyynnöstään. Muutosten jälkeen kappaleen fiilis oli oikeanlainen.",-1),_n={key:2,class:"content"},Un=Object(a["f"])("h3",null,"Scrum",-1),Kn=Object(a["f"])("p",null,"Toteutimme projektin aikana Scrum menetelmää. Koin Scrumin aluksi sekavana, koska sitä varten piti luoda valtava määrä erilaista dokumentaatiota. Pääsin kuitenkin hyvin pian rytmiin viikkopalaverin, Sprint Planningin, Sprint Retrospectiven, Sprint Reviewin ja Daily Scrumien kanssa. Dailyjen merkitys TrigendaDigi projektissa oli vähäinen, koska olimme jatkuvasti etäyhteydessä tiimin jäsenten kesken. Daily Scrumit olisivat merkittävämpiä, jos tiimin jäsenet tekisivät enemmän töitä yksin. TrigendaDigi projektissa Dailyt pysyivät sopivan lyhyinä. Aluksi käytimme Sprint Planningiin liian vähän aikaa. Projektin loppupuolella Spring Planning tehtiin huomattavasti paremmin ja Sprint Backlog Itemeihin määriteltiin selkeät Definion of Done:t. ",-1),Jn={key:3,class:"content"},Gn=Object(a["f"])("h3",null,"ZenHub",-1),Yn=Object(a["f"])("p",null,"Projektin Product Backlog ja Sprint Backlog olivat ZenHub:ssa. Tässä osa-alueessa oli eniten kehitettävää projektin aikana. Aluksi Backlog Itemit olivat todella suuria ja Usein ne unohtui sulkea heti työn valmistuttua. Burndown Charttiin tuli harvakseltaan isoja pudotuksia tästä johtuen. Usein Sprintin Backlog Itemit unohtui laittaa In Progress tilaan, kun työ aloitettiin. Selkeitä Definition of Done määritelmiä ei tehty. Kehityimme projektinhallinnassa huomattavasti projektin loppua kohden. Pilkoimme Backlog Itemit huomattavasti pienemmiksi ja lisäsimme niihin selkeät Definition of Done:t. Pidimme myös kiinni siitä, että työn alle otettavat Backlog Itemit laitetaan heti In Progress tilaan ja suljetaan, kun ne ovat valmiina. ",-1),Wn=Object(a["f"])("p",null,"En ollut aiemmin käyttänyt lainkaan ZenHubia. Se osoittautui käteväksi työkaluksi. Uskon kuitenkin, että fyysinen taulu muistilappujen kera olisi vielä parempi vaihtoehto, jos töitä tehtäisiin toimistotiloissa. Story Points:ien arviointi Product Backlogiin osoittautui haastavaksi. Oli todella vaikeaa arvioida, kuinka kauan tietyn sovelluskehityksen osan tekeminen tulee kestämään. Uskon, että tässä asiassa kehittyy parhaiten ajan kanssa uusien projektien parissa työskentelemällä.",-1),qn={key:4,class:"content"},zn=Object(a["f"])("h3",null,"GitHub",-1),$n=Object(a["f"])("p",null,"Ennen Ticorporate projektia en ollut tehnyt tiimityötä ohjelmoinnin parissa enkä ollut käyttänyt GitHubia missään projektissa. GitHub osoittautui todella hyödylliseksi tiimin kanssa koodatessa. Opin miten sovelluskehityksen tehtäviä voidaan jakaa kätevästi eri henkilöille ja työskennellä niiden parissa yhtä aikaa. Loimme projektin aikana useita eri Brancheja erilaisia sovelluksen ominaisuuksia varten. Jossain vaiheessa käytimme myös samaa Branchia eri osien muokkaamiseen. Tässä on vielä kehittämisen varaa, jotta homma pysyy järjestelmällisenä.",-1),Qn={key:5,class:"content"},Zn=Object(a["f"])("h3",null,"Aiempi osaaminen",-1),Xn=Object(a["f"])("p",null,"Trigenda web-sovellus on toteutettu Vue.js frameworkia hyödyntäen. Minulla on aiempaa kokemusta Angularin ja Reactin parissa työskentelystä ja nyt pääsin laajentamaan osaamistani myös Vue.js:ään. Koodin kirjoitukseen käytin Visual Studio Code:a ja GitHub:in hallintaan GitHub Bash:ia. Projektissa käytettiin myös MySQL-tietokantaa, josta minulla on jonkin verran aiempaa kokemusta. ",-1),et=Object(a["f"])("p",null,"Vue.js on toiminnaltaan hyvin samankaltainen framework kuin Angular ja React, joten sen haltuunotto sujui suhteellisen nopeasti. Vue:n templaatin ja JavaScript osion syntaksin opettelu vei jonkin aikaa projektin alkupuolella ennen varsinaisen sovelluskehityksen aloittamista. Opettelin uutta syntaksia läpi koko projektin, aina tarpeen mukaan.",-1),nt={key:6,class:"content"},tt=Object(a["f"])("h3",null,"Oppiminen",-1),at=Object(a["f"])("p",null,"Projektin myötä olen huomannut kuinka tärkeää koodin kommentointi ja koodin/sovelluksen rakenne on. Aluksi kommentointi jäi hieman toissijaiseksi. Ajattelin, että tuloksen aikaansaaminen on tärkeämpää, koska teimme asiakastyötä Trigenda Oy:lle. Hyvin pian kuitenkin huomasin, että esim. viikko-pari sitten kirjoitettu koodi ja sen toiminta ei olekaan enää niin selkeästi omassa muistissa. Kommentointi on erityisen tärkeää myös, jos joku muu sovelluskehittäjä lukee kirjoitettua koodia. Projektin myöhemmässä vaiheessa saatuani jonkin tietyn sovelluksen osan koodattua, tein kommentoinnin asianmukaisesti.",-1),rt=Object(a["f"])("p",null,'Olen oppinut tekemään fiksumpia ratkaisuja sovelluksen rakenteen kanssa. Kun sovellukseen luodaan uusia osia, panostan rakenteen suunnitteluun nyt enemmän. Hyvän rakenteen avulla säästytään tulevilta "umpikujilta" ja copy-paste koodilta jatkuvasti kasvavassa sovelluksessa. Hyvään rakenteeseen on mietitty tarkkaan esim. minkä komponentin kuuluu tehdä mikäkin asia. Tästä esimerkkinä Phase 2 ja Overlay komponentteihin toteutettu eteneminen progress indexin perusteella. ',-1),st=Object(a["f"])("p",null,"MySQL-tietokannan suunnittelu TrigendaDigi web-sovellukseen osoittautui haastavaksi. Teimme suunnittelutyötä useampana eri päivänä. Saimme apua tietokannan suunnitteluun, mistä oli valtavasti hyötyä. Tietokannan suunnittelu on osa-alue, jossa haluan kehittyä vielä paremmaksi. Itse MySQL-koodin kirjoittaminen sujui helposti, kun tietokannan rakenne oli valmis.",-1);Object(a["p"])();var it=In((function(e,n,t,r,s,i){return Object(a["o"])(),Object(a["c"])("div",xn,[Object(a["f"])("div",Nn,[Object(a["f"])("h2",{class:["subMenu",{chosen:0===r.state.visibleContent}],onClick:n[1]||(n[1]=function(e){return r.toggleVisibility(0)})},"YHTEISTYÖ",2),Object(a["f"])("h2",{class:["subMenu",{chosen:1===r.state.visibleContent}],onClick:n[2]||(n[2]=function(e){return r.toggleVisibility(1)})},"SCRUM",2),Object(a["f"])("h2",{class:["subMenu",{chosen:2===r.state.visibleContent}],onClick:n[3]||(n[3]=function(e){return r.toggleVisibility(2)})},"OHJELMOINTI",2)]),0===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",Rn,[Pn,Ln,Mn])):Object(a["d"])("",!0),0===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",Vn,[Fn,Dn,Bn,Hn])):Object(a["d"])("",!0),1===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",_n,[Un,Kn])):Object(a["d"])("",!0),1===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",Jn,[Gn,Yn,Wn])):Object(a["d"])("",!0),1===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",qn,[zn,$n])):Object(a["d"])("",!0),2===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",Qn,[Zn,Xn,et])):Object(a["d"])("",!0),2===r.state.visibleContent?(Object(a["o"])(),Object(a["c"])("div",nt,[tt,at,rt,Object(a["f"])("p",null,"Opin luomaan Vue projektin alusta loppuun ja buildaamaan sen valmiiksi. Opin lisäämään buildatun projektin GitHub Pages sivulle omasta repositoriosta. Myös tämä portfolio on luotu käyttäen Vue.js:ää ja lisätty GitHub Pagesiin. Opin käyttämään Vue:n Propseja ja Emitointia eli keskustelua Parent ja Child komponenttien välillä ja paljon muita Vue:n toimintoja kuten v-if, v-for, v-model, v-bind, v-on, v-html, double mustache "+Object(a["y"])()+", setup(), ref(), reactive(), watch(), data(), methods(), computed(). Opin myös luomaan PDF-tiedoston JSPDF-kirjastoa hyödyntäen.",1),st])):Object(a["d"])("",!0)])})),ot={name:"SelfEvaluation",setup:function(){var e=Object(a["s"])({visibleContent:0}),n=function(n){e.visibleContent=n};return{state:e,toggleVisibility:n}}};t("e1e9");ot.render=it,ot.__scopeId="data-v-abb1fcf6";var lt=ot,ct=[{path:"/profile",name:"Profile",component:O},{path:"/code",name:"Code",component:Qe},{path:"/music",name:"Music",component:En},{path:"/selfevaluation",name:"SelfEvaluation",component:lt},{path:"/",redirect:"/profile"}],dt=Object(v["a"])({history:Object(v["b"])(),routes:ct}),ut=dt,pt=t("9319"),mt=(t("098b"),t("e1ae"),t("4121"),t("bb57")),vt=Object(a["b"])(m);vt.use(ut),vt.use(pt["a"]),vt.component("Button",mt["a"]),vt.mount("#app")},"6e0f":function(e,n,t){e.exports=t.p+"img/databaseV4.7db289ca.png"},"6ec7":function(e,n,t){"use strict";t("28b4")},7102:function(e,n,t){"use strict";t("9d98")},"757c":function(e,n,t){},"8cd8":function(e,n,t){"use strict";t("10b8")},"9d98":function(e,n,t){},b0df:function(e,n,t){e.exports=t.p+"img/me.238120a6.jpg"},e1e9:function(e,n,t){"use strict";t("5588")},e7ea:function(e,n,t){e.exports=t.p+"img/databaseV2.d2a17b3a.png"},e845:function(e,n,t){}});
//# sourceMappingURL=app.f478a34a.js.map